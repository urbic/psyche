<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="PsyllaReference_Types">
<title>Типы</title>

<para>
В языке Psylla имеется гибкая и расширяемая система типов. Типы реализованы как
классы или интерфейсы языка Java. Каждый объект в Psylla представлен как объект
некоторого класса, реализующий интерфейс <classname>PsyObject</classname>.
</para>

<para>
Расширяемость системы типов достигается за счёт программирования на Java новых
производных от <classname>PsyObject</classname> классов. Создание новых типов
средствами Psylla невозможно.
</para>

<para>
Большинство операторов Psylla рассчитывают на определённый тип своих операндов.
Так, оператор сложения <xref xrefstyle="template:%t"
linkend="PsyllaReference_Operators_Details_add"/> может применяться к числам,
но не к строкам.
</para>

<para>
Некоторые операторы полиморфны, то есть способны менять свой смысл
в соответствии с типом своих операндов. К примеру, тот же оператор <xref
xrefstyle="template:%t" linkend="PsyllaReference_Operators_Details_add"/>
для целочисленных операндов возвращает результат целого типа (за исключением
того случая, когда сумма выходит за границы целого типа; тогда результат имеет
вещественный тип). Если один из операндов целый, а другой — вещественный,
или же оба вещественные, результат также будет иметь вещественный тип. Если
хотя бы один из операндов имеет комплексный тип, такого же типа будет
результат. Другой пример: оператор <xref xrefstyle="template:%t"
linkend="PsyllaReference_Operators_Details_or"/> вычисляет дизъюнкцию своих
операндов. Если оба операнда булевского типа, результат будет булевским, а если
оба операнда целочисленные, выполняется побитовая дизъюнкция, и результат будет
целым числом.
</para>

<section xml:id="PsyllaReference_Types_Details">
<title>Типы детально</title>

&PsyllaReference_Types_Details_additive;
&PsyllaReference_Types_Details_appendable;
&PsyllaReference_Types_Details_arithmetic;
&PsyllaReference_Types_Details_array;
&PsyllaReference_Types_Details_arraylike;
&PsyllaReference_Types_Details_atomic;
&PsyllaReference_Types_Details_biginteger;
&PsyllaReference_Types_Details_bitarray;
&PsyllaReference_Types_Details_bitset;
&PsyllaReference_Types_Details_bitwise;
&PsyllaReference_Types_Details_blockingqueue;
&PsyllaReference_Types_Details_boolean;
&PsyllaReference_Types_Details_bounded;
&PsyllaReference_Types_Details_clearable;
&PsyllaReference_Types_Details_closeable;
&PsyllaReference_Types_Details_command;
&PsyllaReference_Types_Details_complex;
&PsyllaReference_Types_Details_condition;
&PsyllaReference_Types_Details_container;
&PsyllaReference_Types_Details_context;

<section xml:id="PsyllaReference_Types_Details_convertabletointeger">
<title><type>convertabletointeger</type></title>
<para>
Тип объектов, которые могут быть преобразованы к типу <xref
xrefstyle="template:%t"
linkend="PsyllaReference_Types_Details_integer"/>.
</para>
</section>

<section xml:id="PsyllaReference_Types_Details_convertabletoname">
<title><type>convertabletoname</type></title>
<para>
Тип объектов, которые могут быть преобразованы к типу <xref
xrefstyle="template:%t"
linkend="PsyllaReference_Types_Details_name"/>.
</para>
</section>

<section xml:id="PsyllaReference_Types_Details_convertabletostring">
<title><type>convertabletostring</type></title>
<para>
Тип объектов, которые могут быть преобразованы к типу <xref
xrefstyle="template:%t"
linkend="PsyllaReference_Types_Details_string"/>.
</para>
</section>

<section xml:id="PsyllaReference_Types_Details_convertabletoreal">
<title><type>convertabletoreal</type></title>
<para>
Тип объектов, которые могут быть преобразованы к типу <xref
xrefstyle="template:%t"
linkend="PsyllaReference_Types_Details_real"/>.
</para>
</section>

&PsyllaReference_Types_Details_dict;
&PsyllaReference_Types_Details_dictlike;
&PsyllaReference_Types_Details_evaluable;
&PsyllaReference_Types_Details_filereader;
&PsyllaReference_Types_Details_filewriter;
&PsyllaReference_Types_Details_flushable;
&PsyllaReference_Types_Details_indexed;
&PsyllaReference_Types_Details_input;
&PsyllaReference_Types_Details_integer;
&PsyllaReference_Types_Details_iterable;
&PsyllaReference_Types_Details_lengthy;
&PsyllaReference_Types_Details_lock;
&PsyllaReference_Types_Details_logical;
&PsyllaReference_Types_Details_mark;
&PsyllaReference_Types_Details_matcher;
&PsyllaReference_Types_Details_name;
&PsyllaReference_Types_Details_namespace;
&PsyllaReference_Types_Details_null;
&PsyllaReference_Types_Details_numeric;
&PsyllaReference_Types_Details_object;
&PsyllaReference_Types_Details_operator;
&PsyllaReference_Types_Details_output;
&PsyllaReference_Types_Details_proc;
&PsyllaReference_Types_Details_queuelike;
&PsyllaReference_Types_Details_random;
&PsyllaReference_Types_Details_readable;
&PsyllaReference_Types_Details_reader;
&PsyllaReference_Types_Details_real;
&PsyllaReference_Types_Details_realnumeric;
&PsyllaReference_Types_Details_regexp;
&PsyllaReference_Types_Details_resettable;
&PsyllaReference_Types_Details_scalar;
&PsyllaReference_Types_Details_set;
&PsyllaReference_Types_Details_setlike;
&PsyllaReference_Types_Details_string;
&PsyllaReference_Types_Details_stringreader;
&PsyllaReference_Types_Details_stringwriter;
&PsyllaReference_Types_Details_stringy;
&PsyllaReference_Types_Details_type;
&PsyllaReference_Types_Details_writable;
&PsyllaReference_Types_Details_writer;

</section>

</chapter>
