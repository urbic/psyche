<?xml version="1.0" encoding="UTF-8"?>
<refentry xml:id="rePsiOp">

<refmeta>
<refentrytitle>psiop</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>

<refnamediv>
<refname>psiop</refname>
<refpurpose>Ψ language core operators</refpurpose>
</refnamediv>

<refsect1>
<title>Ψ Core Operators by Category</title>

<refsect2>
<title>Operand Stack Manipulation Operators</title>

<informaltable frame="none">
<tgroup cols="3">
<tbody>

<row>
<entry>
<token>pop</token>
</entry>
<entry>
<replaceable>object</replaceable> ⇒ —
</entry>
<entry>
Discard top element
</entry>
</row>

<row>
<entry>
<token>exch</token>
</entry>
<entry>
<replaceable>object<subscript>1</subscript></replaceable> <replaceable>object<subscript>2</subscript></replaceable>
⇒
<replaceable>object<subscript>2</subscript></replaceable> <replaceable>object<subscript>1</subscript></replaceable>
</entry>
<entry>
Exchange top two elements
</entry>
</row>

<row>
<entry>
<token>dup</token>
</entry>
<entry>
<replaceable>object</replaceable> ⇒ <replaceable>object</replaceable> <replaceable>object</replaceable>
</entry>
<entry>
Duplicate top element
</entry>
</row>

<row>
<entry>
<token>copy</token>
</entry>
<entry>
<replaceable>object<subscript>1</subscript></replaceable>
…
<replaceable>object<subscript>n</subscript></replaceable>
⇒
<replaceable>object<subscript>1</subscript></replaceable>
…
<replaceable>object<subscript>n</subscript></replaceable>
<replaceable>object<subscript>1</subscript></replaceable>
…
<replaceable>object<subscript>n</subscript></replaceable>
</entry>
<entry>
Duplicate top <replaceable>n</replaceable> elements
</entry>
</row>

<row>
<entry>
<token>index</token>
</entry>
<entry>
<replaceable>object<subscript>n</subscript></replaceable>
…
<replaceable>object<subscript>0</subscript></replaceable>
<replaceable>n</replaceable>
⇒
<replaceable>object<subscript>n</subscript></replaceable>
…
<replaceable>object<subscript>0</subscript></replaceable>
<replaceable>object<subscript>n</subscript></replaceable>
</entry>
<entry>
Duplicate arbitrary element
</entry>
</row>

<row>
<entry>
<token>roll</token>
</entry>
<entry>
<replaceable>object<subscript>n-1</subscript></replaceable>
…
<replaceable>object<subscript>0</subscript></replaceable>
<replaceable>n</replaceable>
<replaceable>k</replaceable>
⇒
<replaceable>object<subscript>(k-1) mod n</subscript></replaceable>
<replaceable>object<subscript>0</subscript></replaceable>
…
<replaceable>object<subscript>n-1</subscript></replaceable>
<replaceable>object<subscript>k mod n</subscript></replaceable>
</entry>
<entry>
Roll <replaceable>n</replaceable> elements up <replaceable>k</replaceable> times
</entry>
</row>

<row>
<entry>
<token>clearstack</token>
</entry>
<entry>
⊢
<replaceable>object<subscript>1</subscript></replaceable>
…
<replaceable>object<subscript>n</subscript></replaceable>
⇒
⊢
</entry>
<entry>
Discard all elements
</entry>
</row>

<row>
<entry>
<token>count</token>
</entry>
<entry>
⊢
<replaceable>object<subscript>1</subscript></replaceable>
…
<replaceable>object<subscript>n</subscript></replaceable>
⇒
⊢
<replaceable>object<subscript>1</subscript></replaceable>
…
<replaceable>object<subscript>n</subscript></replaceable>
<replaceable>n</replaceable>
</entry>
<entry>
Count elements on stack
</entry>
</row>

<row>
<entry>
<token>mark</token>
</entry>
<entry>
—
⇒
<replaceable>mark</replaceable>
</entry>
<entry>
Push mark on stack
</entry>
</row>

<row>
<entry>
<token>cleartomark</token>
</entry>
<entry>
<replaceable>mark</replaceable>
<replaceable>object<subscript>1</subscript></replaceable>
…
<replaceable>object<subscript>n</subscript></replaceable>
⇒
—
</entry>
<entry>
Discard elements down through <replaceable>mark</replaceable>
</entry>
</row>

<row>
<entry>
<token>counttomark</token>
</entry>
<entry>
<replaceable>mark</replaceable>
<replaceable>object<subscript>1</subscript></replaceable>
…
<replaceable>object<subscript>n</subscript></replaceable>
⇒
<replaceable>mark</replaceable>
<replaceable>object<subscript>1</subscript></replaceable>
…
<replaceable>object<subscript>n</subscript></replaceable>
<replaceable>n</replaceable>
</entry>
<entry>
Count elements down to <replaceable>mark</replaceable>
</entry>
</row>

</tbody>
</tgroup>
</informaltable>

</refsect2>

<refsect2>
<title>Arithmetic and Math Operators</title>

<informaltable frame="none">
<tgroup cols="3">
<tbody>

<row>
<entry>
<token>add</token>
</entry>
<entry>
<replaceable>numeric<subscript>1</subscript></replaceable>
<replaceable>numeric<subscript>2</subscript></replaceable>
⇒
<replaceable>sum</replaceable>
</entry>
<entry>
Return <replaceable>numeric<subscript>1</subscript></replaceable> plus
<replaceable>numeric<subscript>2</subscript></replaceable>
</entry>
</row>

<row>
<entry>
<token>div</token>
</entry>
<entry>
<replaceable>numeric<subscript>1</subscript></replaceable>
<replaceable>numeric<subscript>2</subscript></replaceable>
⇒
<replaceable>quotient</replaceable>
</entry>
<entry>
Return <replaceable>numeric<subscript>1</subscript></replaceable> divided by
<replaceable>numeric<subscript>2</subscript></replaceable>
</entry>
</row>

<row>
<entry>
<token>idiv</token>
</entry>
<entry>
<replaceable>integer<subscript>1</subscript></replaceable>
<replaceable>integer<subscript>2</subscript></replaceable>
⇒
<replaceable>quotient</replaceable>
</entry>
<entry>
Return <replaceable>integer<subscript>1</subscript></replaceable> divided by
<replaceable>integer<subscript>2</subscript></replaceable>
</entry>
</row>

<row>
<entry>
<token>mod</token>
</entry>
<entry>
<replaceable>integer<subscript>1</subscript></replaceable>
<replaceable>integer<subscript>2</subscript></replaceable>
⇒
<replaceable>modulo</replaceable>
</entry>
<entry>
Return <replaceable>integer<subscript>1</subscript></replaceable> modulo
<replaceable>integer<subscript>2</subscript></replaceable>
</entry>
</row>

<row>
<entry>
<token>mul</token>
</entry>
<entry>
<replaceable>numeric<subscript>1</subscript></replaceable>
<replaceable>numeric<subscript>2</subscript></replaceable>
⇒
<replaceable>product</replaceable>
</entry>
<entry>
Return <replaceable>numeric<subscript>1</subscript></replaceable> times
<replaceable>numeric<subscript>2</subscript></replaceable>
</entry>
</row>

<row>
<entry>
<token>sub</token>
</entry>
<entry>
<replaceable>numeric<subscript>1</subscript></replaceable>
<replaceable>numeric<subscript>2</subscript></replaceable>
⇒
<replaceable>difference</replaceable>
</entry>
<entry>
Return <replaceable>numeric<subscript>1</subscript></replaceable> minus
<replaceable>numeric<subscript>2</subscript></replaceable>
</entry>
</row>

<row>
<entry>
<token>abs</token>
</entry>
<entry>
<replaceable>numeric<subscript>1</subscript></replaceable>
⇒
<replaceable>numeric<subscript>2</subscript></replaceable>
</entry>
<entry>
Return absolute value of
<replaceable>numeric<subscript>1</subscript></replaceable>
</entry>
</row>

<row>
<entry>
<token>neg</token>
</entry>
<entry>
<replaceable>numeric<subscript>1</subscript></replaceable>
⇒
<replaceable>numeric<subscript>2</subscript></replaceable>
</entry>
<entry>
Return negative of <replaceable>numeric<subscript>1</subscript></replaceable>
</entry>
</row>

<row>
<entry>
<token>ceiling</token>
</entry>
<entry>
<replaceable>numeric<subscript>1</subscript></replaceable>
⇒
<replaceable>numeric<subscript>2</subscript></replaceable>
</entry>
<entry>
Return ceiling of <replaceable>numeric<subscript>1</subscript></replaceable>
</entry>
</row>

<row>
<entry>
<token>floor</token>
</entry>
<entry>
<replaceable>numeric<subscript>1</subscript></replaceable>
⇒
<replaceable>numeric<subscript>2</subscript></replaceable>
</entry>
<entry>
Return floor of <replaceable>numeric<subscript>1</subscript></replaceable>
</entry>
</row>

<row>
<entry>
<token>round</token>
</entry>
<entry>
<replaceable>numeric<subscript>1</subscript></replaceable>
⇒
<replaceable>numeric<subscript>2</subscript></replaceable>
</entry>
<entry>
Round <replaceable>numeric<subscript>1</subscript></replaceable> to nearest integer
</entry>
</row>

<row>
<entry>
<token>truncate</token>
</entry>
<entry>
<replaceable>numeric<subscript>1</subscript></replaceable>
⇒
<replaceable>numeric<subscript>2</subscript></replaceable>
</entry>
<entry>
Remove fractional part of <replaceable>numeric<subscript>1</subscript></replaceable>
</entry>
</row>

<row>
<entry>
<token>sqrt</token>
</entry>
<entry>
<replaceable>numeric</replaceable>
⇒
<replaceable>real</replaceable>
</entry>
<entry>
Return square root of <replaceable>numeric</replaceable>
</entry>
</row>

<row>
<entry>
<token>cbrt</token>
</entry>
<entry>
<replaceable>numeric</replaceable>
⇒
<replaceable>real</replaceable>
</entry>
<entry>
Return cubic root of <replaceable>numeric</replaceable>
</entry>
</row>

<row>
<entry>
<token>cos</token>
</entry>
<entry>
<replaceable>numeric</replaceable>
⇒
<replaceable>real</replaceable>
</entry>
<entry>
Return cosine of <replaceable>numeric</replaceable>
</entry>
</row>

<row>
<entry>
<token>sin</token>
</entry>
<entry>
<replaceable>numeric</replaceable>
⇒
<replaceable>real</replaceable>
</entry>
<entry>
Return sine of <replaceable>numeric</replaceable>
</entry>
</row>

<row>
<entry>
<token>exp</token>
</entry>
<entry>
<replaceable>numeric</replaceable>
⇒
<replaceable>real</replaceable>
</entry>
<entry>
Return exponent of <replaceable>numeric</replaceable>
</entry>
</row>

<row>
<entry>
<token>log</token>
</entry>
<entry>
<replaceable>numeric</replaceable>
⇒
<replaceable>real</replaceable>
</entry>
<entry>
Return natural logarithm of <replaceable>numeric</replaceable>
</entry>
</row>

<row>
<entry>
<token>mathpi</token>
</entry>
<entry>
—
⇒
<replaceable>PI</replaceable>
</entry>
<entry>
Return the value of π
</entry>
</row>

<row>
<entry>
<token>mathE</token>
</entry>
<entry>
—
⇒
<replaceable>e</replaceable>
</entry>
<entry>
Return the value of e
</entry>
</row>

</tbody>
</tgroup>
</informaltable>

</refsect2>

<!-- TODO random -->

<refsect2>
<title>Arrray Operators</title>

<informaltable frame="none">
<tgroup cols="3">
<tbody>

<row>
<entry>
<token>array</token>
</entry>
<entry>
—
⇒
<replaceable>array</replaceable>
</entry>
<entry>
Create an empty array
</entry>
</row>

<row>
<entry>
<token>[</token>
</entry>
<entry>
—
⇒
<replaceable>mark</replaceable>
</entry>
<entry>
Start array construction
</entry>
</row>

<row>
<entry>
<token>]</token>
</entry>
<entry>
<replaceable>mark</replaceable>
<replaceable>object<subscript>0</subscript></replaceable>
…
<replaceable>object<subscript>n-1</subscript></replaceable>
⇒
<replaceable>array</replaceable>
</entry>
<entry>
End array construction
</entry>
</row>

<row>
<entry>
<token>length</token>
</entry>
<entry>
<replaceable>array</replaceable>
⇒
<replaceable>integer</replaceable>
</entry>
<entry>
Return number of elements in <replaceable>array</replaceable>
</entry>
</row>

<row>
<entry>
<token>get</token>
</entry>
<entry>
<replaceable>array</replaceable>
<replaceable>index</replaceable>
⇒
<replaceable>object</replaceable>
</entry>
<entry>
Return <replaceable>array</replaceable> element indexed by
<replaceable>index</replaceable>
</entry>
</row>

<row>
<entry>
<token>put</token>
</entry>
<entry>
<replaceable>array</replaceable>
<replaceable>index</replaceable>
<replaceable>object</replaceable>
⇒
—
</entry>
<entry>
Put <replaceable>object</replaceable> into <replaceable>array</replaceable> at
<replaceable>index</replaceable>
</entry>
</row>

<row>
<entry>
<token>getinterval</token>
</entry>
<entry>
<replaceable>array</replaceable>
<replaceable>index</replaceable>
<replaceable>count</replaceable>
⇒
<replaceable>subarray</replaceable>
</entry>
<entry>
Return subarray of <replaceable>array</replaceable> starting at
<replaceable>index</replaceable> for <replaceable>count</replaceable> elements
</entry>
</row>

<row>
<entry>
<token>putinterval</token>
</entry>
<entry>
<replaceable>array</replaceable>
<replaceable>index</replaceable>
<replaceable>iterable</replaceable>
⇒
—
</entry>
<entry>
Replace subarray of <replaceable>array</replaceable> starting at <replaceable>index</replaceable>
by elements of <replaceable>iterable</replaceable>
</entry>
</row>

<row>
<entry>
<token>loadall</token>
</entry>
<entry>
<replaceable>array</replaceable>
<replaceable>index</replaceable>
<replaceable>iterable</replaceable>
⇒
—
</entry>
<entry>
XXX
</entry>
</row>

































</tbody>
</tgroup>
</informaltable>

</refsect2>

</refsect1>

<refsect1>
<title>Operators</title>

<variablelist>

<varlistentry xml:id="mark">
<term><token>[</token></term>
<listitem>
<synopsis>
— ⇒ <replaceable>mark</replaceable>
</synopsis>
<para>
Pushes a mark object on the operand stack.
</para>
</listitem>
</varlistentry>

<!--
<varlistentry xml:id="abs">
<term><token>abs</token></term>
<listitem>
<synopsis>
<replaceable>num<subscript>1</subscript></replaceable> ⇒ <replaceable>num<subscript>2</subscript></replaceable>
</synopsis>
<para>
Returns an absolute value of
<replaceable>num<subscript>1</subscript></replaceable>. The type of the result
value is the same as the type of
<replaceable>num<subscript>1</subscript></replaceable> unless
<replaceable>num<subscript>1</subscript></replaceable> is the smallest (most
negative) integer, in which case the result is a real number.
</para>
</listitem>
</varlistentry>
-->

<!--
abort
abs
ackage-info
add
and
append
appendall
arg
array
arraytomark
astore
atan
begin
bind
bitset
bitshift
bitvector
cbrt
ceiling
clear
cleardictstack
clearstack
cleartomark
clone
close
complex
conjugate
contains
copy
cos
cosh
count
countdictstack
countexecstack
counttomark
currentdict
cvlit
cvn
cvx
def
dict
dicttomark
div
dup
end
eq
exch
exec
exit
exp
false
filereader
filewriter
floor
flush
for
forall
ge
get
getinterval
gt
hypot
idiv
if
ifelse
index
insert
insertall
intersects
isempty
keys
keysforall
known
le
length
load
loadall
log
loop
lt
mark
max
min
mod
module
mul
ne
neg
normaldeviate
not
null
or
pop
pow
prettyprint
print
println
pstack
put
putinterval
quit
random
rcheck
read
readline
readstring
remove
removeall
repeat
retainall
reverse
roll
say
set
setseed
settomark
signum
sin
sinh
sqrt
stop
stopped
string
stringreader
stringwriter
sub
tan
tanh
tointeger
token
tostring
true
type
undef
uniformboolean
uniformdeviate
wcheck
where
writestring
xcheck
xor

-->


</variablelist>

</refsect1>

</refentry>
