<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="PsiReference_Language_Syntax">
<title>Syntax</title>

<section xml:id="PsiReference_Language_Syntax_Comments">
<title>Comments</title>

<para>
<firstterm>Comments</firstterm> are parts of the program text which are ignored
by the parser. There are two types of comments in the Ψ language: oneline and
multiline.
</para>

<section xml:id="PsiReference_Language_Syntax_Comments_OneLine">
<title>Oneline Comments</title>

<para>
The character <literal>#</literal> outside a string or regular expression
introduces a <firstterm>oneline
comment</firstterm><indexterm><primary>comment</primary><secondary>oneline</secondary></indexterm>.
It composed of the characters following the <literal>#</literal> character
until the end of line character.
</para>

<para>
The oneline comment starting with <literal>#!</literal> in the first line of
code in Unix-like operating systems play the role of the
<firstterm>shebang</firstterm><indexterm><primary>shebang</primary></indexterm>.
For example, the program, starting with the line

<programlisting language="psi">#!/usr/bin/psylla</programlisting>

and placed into an executable file, will be executed by the interpreter
<command>/usr/bin/psylla</command>.

</para>

</section>

<section xml:id="PsiReference_Language_Syntax_Comments_MultiLine">
<title>Multiline Comments</title>

<para>
Characters <literal>/#</literal> outside a string or regular expression
introduce a <firstterm>multiline
comment</firstterm><indexterm><primary>comment</primary><secondary>multiline</secondary></indexterm>,
continuing to the next <literal>#/</literal> characters. Embedding multiline
comments into each other is not allowed.
</para>

</section>

</section>

<section xml:id="PsiReference_Language_Syntax_Numbers">
<title>Numbers</title>

<para>
There are several kinds of number literals in the Ψ language:

<itemizedlist>
<listitem>
<para>
Decimal integers, such as
<programlisting language="psi">720
-13
0
+504</programlisting>
</para>
</listitem>
<listitem>
<para>
Hexadecimal integers, such as
<programlisting language="psi">0x13AF
-0X31123e4</programlisting>
</para>
</listitem>
<listitem>
<para>
Binary integers, such as
<programlisting language="psi">0b101110101
-0B111010</programlisting>
</para>
</listitem>
<listitem>
<para>
Integers represented by characters, such as
<programlisting language="psi">`X
`\n</programlisting>
</para>
</listitem>
<listitem>
<para>
Real numbers, such as
<programlisting language="psi">-.5
1.
-1.0
1e5
7.673E-3</programlisting>
</para>
</listitem>
</itemizedlist>

</para>

<para>
The program can create numeric objects of integer, real and complex types. The
language provides a literal representation only for integer and real numbers.
The integers can be written in decimal, hexadecimal or binary form.
</para>

<!--section xml:id="PsiReference_Language_Syntax_Numbers_Decimal">
<title>Decimal Literals</title>

<para>
<firstterm>Десятичные
литералы</firstterm><indexterm><primary>литерал</primary><secondary>десятичный</secondary></indexterm>
состоят из десятичных цифр. Кроме того, они могут содержать единственную
десятичную точку <literal>.</literal> и начинаться с необязательного знака
<literal>+</literal> или <literal>-</literal>.
</para>

<para>
Литералы, не содержащие десятичной точки, обычно приводят к созданию
целочисленного объекта. В случае, если обозначаемое число выходит за границы
допустимых значений целых чисел, создаётся вещественный объект.
</para>

</section>

<section xml:id="PsiReference_Language_Syntax_Numbers_Hexadecimal">
<title>Hexadecimal Literals</title>

<para>
<firstterm>Шестнадцатеричные
литералы</firstterm><indexterm><primary>литерал</primary><secondary>шестнадцатеричный</secondary></indexterm>
начинаются с необязательного знака <literal>+</literal> или
<literal>-</literal>, символов <literal>0X</literal> или <literal>0x</literal>
и завершаются произвольным количеством шестнадцатеричных цифр
<literal>0</literal>‥<literal>9</literal> и
<literal>A</literal>‥<literal>F</literal> или
<literal>a</literal>‥<literal>f</literal>.
</para>

</section>

<section xml:id="PsiReference_Language_Syntax_Numbers_Binary">
<title>Binary Literals</title>

<para>
<firstterm>Двоичные
литералы</firstterm><indexterm><primary>литерал</primary><secondary>двоичный</secondary></indexterm>
начинаются с необязательного знака <literal>+</literal> или
<literal>-</literal>, символов <literal>0B</literal> или <literal>0b</literal>
и завершаются произвольным количеством двоичных цифр <literal>0</literal> или
<literal>1</literal>.
</para>

</section-->


</section>

<section xml:id="PsiReference_Language_Syntax_Strings">
<title>Strings</title>

<para>
String literals are enclosed in double quotes <literal>"</literal>
(<constant>U+22</constant>). Backslash character <literal>\</literal>
(<constant>U+5C</constant>) between quotatian marks have special meaning
defined by the following character.

<informaltable>
<tgroup cols="2">
<tbody>
<row>
<entry><literal>\0</literal></entry>
<entry>null character, <constant>U+0</constant></entry>
</row>
<row>
<entry><literal>\a</literal></entry>
<entry>bell character, <constant>U+7</constant></entry>
</row>
<row>
<entry><literal>\t</literal></entry>
<entry>tab character, <constant>U+9</constant></entry>
</row>
<row>
<entry><literal>\n</literal></entry>
<entry>end of line character, <constant>U+A</constant></entry>
</row>
<row>
<entry><literal>\f</literal></entry>
<entry>end of page character, <constant>U+C</constant></entry>
</row>
<row>
<entry><literal>\r</literal></entry>
<entry>carriage return character, <constant>U+D</constant></entry>
</row>
<row>
<entry><literal>\e</literal></entry>
<entry>escape character, <constant>U+1B</constant></entry>
</row>
<row>
<entry><literal>\"</literal></entry>
<entry>double quote character <literal>"</literal> <constant>U+22</constant></entry>
</row>
<row>
<entry><literal>\\</literal></entry>
<entry>backslash character <literal>\</literal> <constant>U+5C</constant></entry>
</row>
<row>
<entry><literal>\u<replaceable>XXXX</replaceable></literal></entry>
<entry>Unicode code unit <constant>U+<replaceable>XXXX</replaceable></constant></entry>
</row>
<row>
<entry><literal>\x{<replaceable>XXXXXXXX</replaceable>}</literal></entry>
<entry>Unicode code point <constant>U+<replaceable>XXXXXXXX</replaceable></constant></entry>
</row>
<row>
<entry><literal>\N{<replaceable>name</replaceable>}</literal></entry>
<entry>Unicode character named <replaceable>name</replaceable> <remark>(not implemented)</remark></entry>
</row>
<row>
<entry><literal>\c<replaceable>C</replaceable></literal></entry> <entry>for
<replaceable>C</replaceable> character within the
range <constant>U+0‥3F</constant> increment character’s code by 64, for
character within the range <constant>U+40‥7F</constant> decrements the code
by 64</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</para>

<remark>TODO</remark>

</section>

<section xml:id="PsiReference_Language_Syntax_Names">
<title>Names</title>

<para>
The <firstterm>names</firstterm><indexterm><primary>name</primary></indexterm>
consist of letters from <literal>A</literal> to <literal>Z</literal> and
from <literal>a</literal> to <literal>z</literal>
(<constant>U+41‥5A</constant>, <constant>U+61‥7A</constant>), decimal digits
(<constant>U+30‥39</constant>), characters
<literal>_</literal> (<constant>U+5F</constant>),
<literal>.</literal> (<constant>U+2E</constant>),
<literal>+</literal> (<constant>U+2B</constant>),
<literal>-</literal> (<constant>U+2D</constant>),
<literal>=</literal> (<constant>U+3D</constant>),
<literal>$</literal> (<constant>U+24</constant>) and does not begin with a
decimal digit. A name preceded by the <literal>/</literal>
character (<constant>U+2F</constant>).
</para>

<remark>TODO</remark>

</section>

<section xml:id="PsiReference_Language_Syntax_Commands">
<title>Commands</title>

<remark>TODO</remark>

</section>

<section xml:id="PsiReference_Language_Syntax_Arrays">
<title>Arrays</title>

<remark>TODO</remark>

</section>

<section xml:id="PsiReference_Language_Syntax_Procedures">
<title>Procedures</title>

<para>
The characters <literal>{</literal> (<constant>U+7B</constant>) and
<literal>}</literal> (<constant>U+7D</constant>) are used to create
<firstterm>procedures</firstterm><indexterm><primary>procedure</primary></indexterm>.
</para>

<para>
When the parser encounters the <code language="psi">{</code> character, it
continues to scan and create objects, but they are not executed by the
interpreter. When the parser encounters the corresponding <code
language="psi">}</code> character, it puts all the objects created after the
<code language="psi">{</code> character into a new procedure object.  So, the
interpretation of the program fragment

<programlisting language="psi">{ 1 exch div }</programlisting>

leads to the creation of a procedure object, that contains an integer numeric
object <code language="psi">1</code> and two command objects <code
language="psi">exch</code> and <code language="psi">div</code>.
</para>

<para>
The interpreter does not execute the procedure, instead, it puts ot on the
operand stack. The procedure will be executed only at the result of its
invocation. The execution of the procedure (and all of its constituent objects)
is
<firstterm>deferred</firstterm><indexterm><primary>execution</primary><secondary>deferred</secondary></indexterm>).
The meaning of the deferred execution is explained in <xref
linkend="PsiReference_Language_ObjectExecution"/>.
</para>

</section>

<section xml:id="PsiReference_Language_Syntax_Dictionaries">
<title>Dictionaries</title>

<remark>TODO</remark>

</section>

<section xml:id="PsiReference_Language_Syntax_Sets">
<title>Sets</title>

<remark>TODO</remark>

</section>

<section xml:id="PsiReference_Language_Syntax_RegExps">
<title>Regular Expressions</title>

<remark>TODO</remark>

</section>

</section>

