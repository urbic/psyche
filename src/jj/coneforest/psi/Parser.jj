
PARSER_BEGIN(Parser)

package coneforest.psi;

class Parser
{
}

PARSER_END(Parser)

SKIP:
{
	" " | "\n" | "\t" | "\f"
}

TOKEN:
{
	<#TOKEN_DIGIT: ["0"-"9"]>
}

TOKEN:
{
	<#TOKEN_HEXDIGIT: <TOKEN_DIGIT> | ["A"-"F"]>
}

TOKEN:
{
	<#TOKEN_LETTER: ["A"-"Z", "a"-"z"]>
}

TOKEN:
{
	<#TOKEN_SIGN: ["-", "+"]>
}

TOKEN:
{
	<TOKEN_INTEGER:
		(<TOKEN_SIGN>)?
		(<TOKEN_DIGIT>)+
	>
}

TOKEN:
{
	<TOKEN_HEXINTEGER:
		(<TOKEN_SIGN>)?
		"0x"
		(<TOKEN_HEXDIGIT>)+
	>
}

TOKEN:
{
	<TOKEN_BININTEGER:
		(<TOKEN_SIGN>)?
		"0b"
		(["0", "1"])+
	>
}

TOKEN:
{
	<TOKEN_REAL:
		(<TOKEN_SIGN>)?
		(
			(<TOKEN_DIGIT>)+
			(
				"." (<TOKEN_DIGIT>)* (<TOKEN_EXPONENT>)?
				|
				<TOKEN_EXPONENT>
				|
				(<TOKEN_EXPONENT>)?
			)
			|
			"." (<TOKEN_DIGIT>)+ (<TOKEN_EXPONENT>)?
		)
	>
}

TOKEN:
{
	<#TOKEN_EXPONENT: ["e", "E"] (<TOKEN_SIGN>)? (<TOKEN_DIGIT>)+>
}

TOKEN:
{
	<TOKEN_COMMENT:
		"#"
		(~["\n"])*
		"\n"
	>
}

TOKEN:
{
	<TOKEN_STRING: "\"" (<TOKEN_SPECIAL> | ~["\"", "\\"])* "\"">
}

TOKEN:
{
	<#TOKEN_SPECIAL:
		"\\"
		(
			["0", "a", "n", "t", "f", "\"", "\\", "e", "r", "\n"]

			|

			"u" <TOKEN_HEXDIGIT> <TOKEN_HEXDIGIT> <TOKEN_HEXDIGIT> <TOKEN_HEXDIGIT>
		)
	>
}

TOKEN:
{
	<TOKEN_NAME_LITERAL: "/" <TOKEN_NAME_EXECUTABLE>>
}

TOKEN:
{
	<TOKEN_NAME_IMMEDIATE: "/" <TOKEN_NAME_LITERAL>>
}

TOKEN:
{
	<TOKEN_OPEN_BRACE: "{">
}

TOKEN:
{
	<TOKEN_CLOSE_BRACE: "}">
}

TOKEN:
{
	<TOKEN_HEXSTRING: "<" (<TOKEN_HEXDIGIT>)* ">">
}

TOKEN:
{
	<TOKEN_NAME_EXECUTABLE:
		(
			(<TOKEN_LETTER> | ["_", "."])
			(<TOKEN_LETTER> | ["_", "."] | <TOKEN_DIGIT>)*
		)

		|

		["[", "]"] | "<<" | ">>" | "=="
	>
}
