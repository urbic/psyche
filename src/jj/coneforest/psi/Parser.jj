
PARSER_BEGIN(Parser)

package coneforest.psi;

class Parser
{
}

PARSER_END(Parser)

SKIP:
{
	" " | "\n" | "\r" | "\t" | "\f" | "\u00A0"
}

TOKEN:
{
	<#TOKEN_DIGIT: ["0"-"9"]>
}

TOKEN:
{
	<#TOKEN_HEXDIGIT: <TOKEN_DIGIT> | ["A"-"F", "a"-"f"]>
}

TOKEN:
{
	<#TOKEN_LETTER: ["A"-"Z", "a"-"z"]>
}

TOKEN:
{
	<#TOKEN_SIGN: ["-", "+"]>
}

TOKEN:
{
	<#TOKEN_INTEGER_UNSIGNED: (<TOKEN_DIGIT>)+>
}

TOKEN:
{
	<TOKEN_INTEGER: (<TOKEN_SIGN>)? <TOKEN_INTEGER_UNSIGNED>>
}

TOKEN:
{
	<TOKEN_INTEGER_HEXADECIMAL: (<TOKEN_SIGN>)? "0" ["X", "x"] (<TOKEN_HEXDIGIT>)+>
}

TOKEN:
{
	<TOKEN_INTEGER_BINARY: (<TOKEN_SIGN>)? "0" ["B", "b"] (["0", "1"])+>
}

TOKEN:
{
	<TOKEN_CHAR: "`" (~["\\"] | <TOKEN_STRING_SPECIAL>)>
}

TOKEN:
{
	<#TOKEN_REAL_UNSIGNED:
		(
			<TOKEN_INTEGER_UNSIGNED> ("." (<TOKEN_DIGIT>)*)?
			|
			"." <TOKEN_INTEGER_UNSIGNED>
		)
		(<TOKEN_EXPONENT>)?
	>
}

TOKEN:
{
	<TOKEN_REAL: (<TOKEN_SIGN>)? <TOKEN_REAL_UNSIGNED>>
}

/*
TOKEN:
{
	<TOKEN_COMPLEX:
		"%C%"
		(<TOKEN_INTEGER>|<TOKEN_REAL>)
		":"
		(<TOKEN_INTEGER>|<TOKEN_REAL>)
	>
}
*/

TOKEN:
{
	<#TOKEN_EXPONENT: ["E", "e"] <TOKEN_INTEGER>>
}

TOKEN:
{
	<TOKEN_COMMENT: <TOKEN_COMMENT_ONELINE> | <TOKEN_COMMENT_MULTILINE>>
}

TOKEN:
{
	<#TOKEN_COMMENT_ONELINE: "#" (~["\n"])* "\n">
}

TOKEN:
{
	<#TOKEN_COMMENT_MULTILINE: "/#" (~["/"] | ("/" ~["#"]))* "#/">
}

TOKEN:
{
	<TOKEN_STRING: "\"" (<TOKEN_STRING_SPECIAL> | ~["\"", "\\"])* "\"">
}

TOKEN:
{
	<#TOKEN_STRING_SPECIAL:
		"\\"
		(
			["0", "a", "n", "t", "f", "\"", "\\", "e", "r", "\n"]
			|
			"u" <TOKEN_HEXDIGIT> <TOKEN_HEXDIGIT> <TOKEN_HEXDIGIT> <TOKEN_HEXDIGIT>
			|
			"x{" (<TOKEN_HEXDIGIT>)+ "}"
			|
			"c" ["\u0000"-"\u00FF"]
		)
	>
}

TOKEN:
{
	<TOKEN_REGEXP:
		"@"
		(
			<TOKEN_STRING_SPECIAL>
			|
			<TOKEN_REGEXP_SPECIAL>
			|
			~["@", "\\"]
		)*
		"@"
	>
}

TOKEN:
{
	<#TOKEN_REGEXP_SPECIAL:
		"\\"
		(
			//["d", "D", "s", "S", "w", "W", "b", "B", "A", "G", "z", "Z", "p", "k", "Q", "E", "!"]
				//["!"]
			//"!"
			//"!"
			~[]
			//|
			//(<TOKEN_DIGIT>)+
		)
	>
}

TOKEN:
{
	<TOKEN_NAME: "/" <TOKEN_COMMAND>>
}

TOKEN:
{
	<TOKEN_IMMEDIATE: "/" <TOKEN_NAME>>
}

TOKEN:
{
	<TOKEN_COMMAND:
		(<TOKEN_LETTER> | <TOKEN_NAME_SPECIAL_CHAR>)
		(<TOKEN_LETTER> | <TOKEN_NAME_SPECIAL_CHAR> | <TOKEN_DIGIT>)*
		|
		["[", "]", "(", ")", "<", ">", "=", "?"]
	>
}

TOKEN:
{
	<TOKEN_OPEN_BRACE: "{">
}

TOKEN:
{
	<TOKEN_CLOSE_BRACE: "}">
}

TOKEN:
{
	<#TOKEN_NAME_SPECIAL_CHAR: ["_", ".", "-", "+", "=", "$"]>
}
