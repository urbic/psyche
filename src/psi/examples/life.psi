#!/usr/bin/psylla

/width environment /COLUMNS get tointeger def
/height environment /LINES get tointeger def
/plane bitarray def

/fget
{
	exch
	//width mul
	add
	get
}
bind def

/fset
{
	3 1 roll
	exch
	//width mul
	add
	exch
	put
}
bind def

/init
{
	'\e[2J' print
	//width //height mul
	{
		//plane //stdrandom uniformboolean append
	}
	repeat
}
bind def

/neighbours
{
	dict begin
		/x exch def
		/y exch def
		0
		# O
		plane
		y //height mod
		x 1 add //width mod
		fget { 1 add } if
		# NO
		plane
		y 1 add //height mod
		x 1 add //width mod
		fget { 1 add } if
		# N
		plane
		y 1 add //height mod
		x //width mod
		fget { 1 add } if
		# NW
		plane
		y 1 add //height mod
		x 1 sub //width mod
		fget { 1 add } if
		# W
		plane
		y //height mod
		x 1 sub //width mod
		fget { 1 add } if
		# SW
		plane
		y 1 sub //height mod
		x 1 sub //width mod
		fget { 1 add } if
		# S
		plane
		y 1 sub //height mod
		x //width mod
		fget { 1 add } if
		# SO
		plane
		y 1 sub //height mod
		x 1 add //width mod
		fget { 1 add } if
	end
}
bind def

/frame
{
	'\e[0;0H' print
	0 1 //height 1 sub
	{
		0 1 //width 1 sub
		{
			plane 2 index 3 -1 roll fget
			'\e[1;33m0' '\e[34mo' ifelse print
		}
		for
		pop
	}
	for
	//stdout flush
}
bind def

/step
{
	/newplane bitarray def
	0 1 //height 1 sub
	{
		0 1 //width 1 sub
		{
			2 copy
			plane
			3 1 roll
			fget
			{
				# alive cell
				2 copy
				neighbours
				dup 2 eq
				exch 3 eq
				or
			}
			{
				# dead cell
				2 copy
				neighbours
				3 eq
			}
			ifelse

			newplane exch append
			pop
		}
		for
		pop
	}
	for
	/plane newplane def
}
bind def

init
{ frame step } loop
