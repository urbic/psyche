PARSER_BEGIN(Parser)

package coneforest.psylla;

class Parser
{
	public Parser(final coneforest.psylla.core.PsyReader oReader)
	{
		this(oReader.reader());
	}
}

PARSER_END(Parser)

SKIP:
{
	" " | "\n" | "\r" | "\t" | "\f" | "\u00A0"
}

TOKEN:
{
	<#DIGIT: ["0"-"9"]>
}

TOKEN:
{
	<#HEXDIGIT: <DIGIT> | ["A"-"F", "a"-"f"]>
}

TOKEN:
{
	<#LETTER: ["A"-"Z", "a"-"z"]>
}

TOKEN:
{
	<#SIGN: ["-", "+"]>
}

TOKEN:
{
	<#INTEGER_UNSIGNED: (<DIGIT>)+>
}

TOKEN:
{
	<INTEGER: (<SIGN>)? <INTEGER_UNSIGNED>>
}

TOKEN:
{
	<INTEGER_HEXADECIMAL: (<SIGN>)? "0" ["X", "x"] (<HEXDIGIT>)+>
}

TOKEN:
{
	<INTEGER_BINARY: (<SIGN>)? "0" ["B", "b"] (["0", "1"])+>
}

TOKEN:
{
	<CHAR: "`" (~["\\"] | <STRING_SPECIAL>)>
}

TOKEN:
{
	<#REAL_UNSIGNED:
		(
			<INTEGER_UNSIGNED> ("." (<DIGIT>)*)?
			|
			"." <INTEGER_UNSIGNED>
		)
		(<EXPONENT>)?
	>
}

TOKEN:
{
	<REAL: (<SIGN>)? <REAL_UNSIGNED>>
}

TOKEN:
{
	<#EXPONENT: ["E", "e"] <INTEGER>>
}

TOKEN:
{
	<COMMENT: <COMMENT_ONELINE> | <COMMENT_MULTILINE>>
}

TOKEN:
{
	<#COMMENT_ONELINE: "#" (~["\n"])* "\n">
}

TOKEN:
{
	<#COMMENT_MULTILINE: "/#" (~["/"] | ("/" ~["#"]))* "#/">
}

TOKEN:
{
	<STRING: "\"" (<STRING_SPECIAL> | "\\\"" | ~["\"", "\\"])* "\"">
}

TOKEN:
{
	<NAME_QUOTED: "'" (<STRING_SPECIAL> | "\\'" | ~["'", "\\"])* "'">
}

TOKEN:
{
	<#STRING_SPECIAL:
		"\\"
		(
			["0", "a", "n", "t", "f", "\\", "e", "r", "v", "\n"]
			|
			"u" <HEXDIGIT> <HEXDIGIT> <HEXDIGIT> <HEXDIGIT>
			|
			"x{" (<HEXDIGIT>)+ "}"
			|
			"c" ["\u0000"-"\u00FF"]
		)
	>
}

TOKEN:
{
	<REGEXP:
		"~"
		(
			<STRING_SPECIAL>
			|
			<REGEXP_SPECIAL>
			|
			~["~", "\\"]
		)*
		"~"
	>
}

TOKEN:
{
	<#REGEXP_SPECIAL: "\\" ~[]>
}

TOKEN:
{
	<NAME_SLASHED: "/" <COMMAND>>
}

TOKEN:
{
	<IMMEDIATE: "/" <NAME_SLASHED>>
}

TOKEN:
{
	<#COMMAND_UNQUALIFIED:
		(<LETTER> | <NAME_SPECIAL_CHAR>)
		(<LETTER> | <NAME_SPECIAL_CHAR> | <DIGIT>)*
		|
		["[", "]", "(", ")", "<", ">", "=", "?"]
	>
}

TOKEN:
{
	<COMMAND: <COMMAND_UNQUALIFIED> ("@" <COMMAND_UNQUALIFIED>)?>
}

TOKEN:
{
	<OPEN_BRACE: "{">
}

TOKEN:
{
	<CLOSE_BRACE: "}">
}

TOKEN:
{
	<#NAME_SPECIAL_CHAR: ["_", ".", "-", "+", "=", "$"]>
}
