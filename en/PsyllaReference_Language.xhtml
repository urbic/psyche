<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head><title>Chapter 2. Language</title><link rel="stylesheet" type="text/css" href="../common/PsyllaReference.css"/><link rev="made" href="${xslt.link.mailto.url}"/><meta name="generator" content="DocBook XSL Stylesheets V1.78.1"/><link rel="home" href="PsyllaReference.xhtml" title="The Psylla Language — Complete Reference"/><link rel="up" href="PsyllaReference.xhtml" title="The Psylla Language — Complete Reference"/><link rel="prev" href="PsyllaReference_Interpreter.xhtml" title="Chapter 1. Interpreter"/><link rel="next" href="PsyllaReference_Types.xhtml" title="Chapter 3. Types"/><link rel="preface" href="PsyllaReference_Introduction.xhtml" title="Preface"/><link rel="chapter" href="PsyllaReference_Interpreter.xhtml" title="Chapter 1. Interpreter"/><link rel="chapter" href="PsyllaReference_Language.xhtml" title="Chapter 2. Language"/><link rel="chapter" href="PsyllaReference_Types.xhtml" title="Chapter 3. Types"/><link rel="chapter" href="PsyllaReference_Operators.xhtml" title="Chapter 4. Operators"/><link rel="chapter" href="PsyllaReference_Errors.xhtml" title="Chapter 5. Errors"/><link rel="chapter" href="PsyllaReference_Development.xhtml" title="Chapter 6. Development"/><link rel="index" href="PsyllaReference_Index.xhtml" title="Index"/><link rel="section" href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Interpreter" title="2.1. Interpreter"/><link rel="section" href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Syntax" title="2.2. Syntax"/><link rel="section" href="PsyllaReference_Language.xhtml#PsyllaReference_Language_CoreTypes" title="2.3. Core Types"/><link rel="section" href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Stacks" title="2.4. Stacks"/><link rel="section" href="PsyllaReference_Language.xhtml#PsyllaReference_Language_ObjectExecution" title="2.5. Execution of Objects"/><link rel="section" href="PsyllaReference_Language.xhtml#PsyllaReference_Language_EarlyNameBinding" title="2.6. Early Name Binding"/><link rel="section" href="PsyllaReference_Language.xhtml#PsyllaReference_Language_IO" title="2.7. Input and Output"/><link rel="section" href="PsyllaReference_Language.xhtml#PsyllaReference_Language_MultipleContextExecution" title="2.8. Multiple Context Execution"/><link rel="section" href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Errors" title="2.9. Errors"/><link rel="section" href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar" title="2.10. Grammar"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="shortcut icon" href="../psylla-16.png" type="image/png"/><link rel="author" href="https://plus.google.com/113215332542811715537?rel=author"/></head><body><div class="navheader"><table width="100%" summary="Navigation header"><tr><th colspan="3" align="center">Chapter 2. Language</th></tr><tr><td align="left"><a accesskey="p" href="PsyllaReference_Interpreter.xhtml"><img src="../navigation/prev.svg" alt="Prev"/></a> </td><th width="60%" align="center"> </th><td align="right"> <a accesskey="n" href="PsyllaReference_Types.xhtml"><img src="../navigation/next.svg" alt="Next"/></a></td></tr></table></div><div class="chapter"><div class="titlepage"><div><div><h1 class="title"><a id="PsyllaReference_Language"/>Chapter 2. Language</h1></div></div></div><div class="toc"><div class="toc-title">Table of Contents</div><dl class="toc"><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Interpreter">2.1. Interpreter</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Syntax">2.2. Syntax</a></span></dt><dd><dl><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Syntax_Comments">2.2.1. Comments</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Syntax_Numbers">2.2.2. Numbers</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Syntax_Strings">2.2.3. Strings</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Syntax_Names">2.2.4. Names</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Syntax_Commands">2.2.5. Commands</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Syntax_Procedures">2.2.6. Procedures</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Syntax_RegExps">2.2.7. Regular Expressions</a></span></dt></dl></dd><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_CoreTypes">2.3. Core Types</a></span></dt><dd><dl><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_CoreTypes_Operators">2.3.1. Operators</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_CoreTypes_Numbers">2.3.2. Numbers</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_CoreTypes_Booleans">2.3.3. Booleans</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_CoreTypes_Marks">2.3.4. Mark</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_CoreTypes_Nulls">2.3.5. Null object</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_CoreTypes_Names">2.3.6. Names</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_CoreTypes_Commands">2.3.7. Commands</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_CoreTypes_Arrays">2.3.8. Arrays</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_CoreTypes_Procedures">2.3.9. Procedures</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_CoreTypes_Strings">2.3.10. Strings</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_CoreTypes_Dictionaries">2.3.11. Dictionaries</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_CoreTypes_RegExps">2.3.12. Regular Expressions</a></span></dt></dl></dd><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Stacks">2.4. Stacks</a></span></dt><dd><dl><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Stacks_OperandStack">2.4.1. Operand Stack</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Stacks_DictionaryStack">2.4.2. Dictionary Stack</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Stacks_ExecutionStack">2.4.3. Execution Stack</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Stacks_Auxiliary">2.4.4. Auxiliary Stacks</a></span></dt></dl></dd><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_ObjectExecution">2.5. Execution of Objects</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_EarlyNameBinding">2.6. Early Name Binding</a></span></dt><dd><dl><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_EarlyNameBinding_BindOperator">2.6.1. The <code class="token"><span class="hl-keyword">bind</span></code> operator</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_EarlyNameBinding_Immediate">2.6.2. Immediate Names</a></span></dt></dl></dd><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_IO">2.7. Input and Output</a></span></dt><dd><dl><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_IO_BasicOperators">2.7.1. Basic Input/Output Operators</a></span></dt></dl></dd><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_MultipleContextExecution">2.8. Multiple Context Execution</a></span></dt><dd><dl><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_MultipleContextExecution_Creation">2.8.1. Creating Contexts</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_MultipleContextExecution_Operators">2.8.2. Context Operators</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_MultipleContextExecution_Synchronization">2.8.3. Context Synchronization</a></span></dt></dl></dd><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Errors">2.9. Errors</a></span></dt><dt><span class="section"><a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar">2.10. Grammar</a></span></dt></dl></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="PsyllaReference_Language_Interpreter"/>2.1. Interpreter</h2></div></div></div><p>
The
<em class="firstterm">interpreter</em><a id="d0e310" class="indexterm"/>
deals with
<em class="firstterm">objects</em><a id="d0e316" class="indexterm"/>.
Some of them represent data, such as numbers, Boolean values, names or
containers. Other objects are considered as the executable instructions:
commands, procedures, operators. However, in the language no fundamental
differences between the data and instructions: any object may be treated,
depending on situation, as data or instruction.
</p><p>
The interpreter reads a program text and extracts
<em class="firstterm">lexemes</em><a id="d0e324" class="indexterm"/>,
also known as
<em class="firstterm">tokens</em><a id="d0e330" class="indexterm"/>.
Part of the interpreter, which succesively extracts token from the program
text, called
<em class="firstterm">parser</em><a id="d0e336" class="indexterm"/>.
In most cases, the token read is converted to object that is executed
immediately. The result of the execution is completely determined by its
<em class="firstterm">type</em><a id="d0e342" class="indexterm"/> and its
<em class="firstterm">value</em><a id="d0e350" class="indexterm"/>. A
<em class="firstterm">comment</em><a id="d0e358" class="indexterm"/>,
a special kind of tokens, is ignored by the interpreter. Objects of some types
can not be created out of tokens, but they can occur as a result of the
execution of operators.
</p><p>
To store the data during the program execution the interpreter has several
<em class="firstterm">stacks</em><a id="d0e366" class="indexterm"/>,
to which the section <a class="xref" href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Stacks" title="2.4. Stacks">Section 2.4, “Stacks”</a> is
dedicated.
</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="PsyllaReference_Language_Syntax"/>2.2. Syntax</h2></div></div></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_Syntax_Comments"/>2.2.1. Comments</h3></div></div></div><p>
A
<em class="firstterm">comment</em><a id="d0e382" class="indexterm"/> is
the part of the program text which is ignored by the parser. There are two
forms of comments in the Ψ language: oneline and multiline.
</p><div class="section"><div class="titlepage"><div><div><h4 class="title"><a id="PsyllaReference_Language_Syntax_Comments_OneLine"/>2.2.1.1. Oneline Comments</h4></div></div></div><p>
The hash character (<code class="literal">#</code>, <code class="constant">U+23</code>) outside a
string or regular expression introduces a <em class="firstterm">oneline
comment</em><a id="d0e399" class="indexterm"/>.
It composed of the characters following the <code class="literal">#</code> character
until the end of line character.

</p><pre class="programlisting"><span class="hl-comment"># This is oneline comment</span></pre><p>

</p><p>
The oneline comment starting with <code class="literal">#!</code> in the first line of
code in Unix-like operating systems play the role of the
<em class="firstterm">shebang</em><a id="d0e418" class="indexterm"/>.
For example, the program starting with the line

</p><pre class="programlisting"><span class="hl-sharpBang">#!/usr/bin/psylla</span></pre><p>

and placed into an executable file, will be executed by the interpreter
<span class="command"><strong>/usr/bin/psylla</strong></span>.

</p></div><div class="section"><div class="titlepage"><div><div><h4 class="title"><a id="PsyllaReference_Language_Syntax_Comments_MultiLine"/>2.2.1.2. Multiline Comments</h4></div></div></div><p>
Characters <code class="literal">/#</code> outside a string or regular expression
introduce a <em class="firstterm">multiline
comment</em><a id="d0e438" class="indexterm"/>,
continuing to the next <code class="literal">#/</code> characters. Nesting multiline
comments into each other is not allowed.

</p><pre class="programlisting"><span class="hl-comment">/#
This is
a multiline comment
#/</span></pre><p>

</p></div></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_Syntax_Numbers"/>2.2.2. Numbers</h3></div></div></div><p>
There are several kinds of number literals in the Ψ language:

</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>
Decimal integers, such as
</p><pre class="programlisting"><span class="hl-number">720</span>
<span class="hl-number">-13</span>
<span class="hl-number">0</span>
<span class="hl-number">+504</span></pre><p>
</p></li><li class="listitem"><p>
Hexadecimal integers, such as
</p><pre class="programlisting"><span class="hl-number">0x13AF</span>
<span class="hl-number">-0X31123e4</span></pre><p>
</p></li><li class="listitem"><p>
Binary integers, such as
</p><pre class="programlisting"><span class="hl-number">0b101110101</span>
<span class="hl-number">-0B111010</span></pre><p>
</p></li><li class="listitem"><p>
Integers represented by characters, such as
</p><pre class="programlisting"><span class="hl-number">`X</span>
<span class="hl-number">`\n</span></pre><p>
</p></li><li class="listitem"><p>
Real numbers, such as
</p><pre class="programlisting"><span class="hl-number">-.5</span>
<span class="hl-number">1.</span>
<span class="hl-number">-1.0</span>
<span class="hl-number">1e5</span>
<span class="hl-number">7.673E-3</span></pre><p>
</p></li></ul></div><p>

</p><p>
The program can create numeric objects of integer, real and complex types. The
language provides a literal representation only for integer and real numbers.
The integers can be written in decimal, hexadecimal or binary form.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_Syntax_Strings"/>2.2.3. Strings</h3></div></div></div><p>
String literals are enclosed in double quotes (<code class="literal">"</code>,
<code class="constant">U+22</code>). Backslash character (<code class="literal">\</code>,
<code class="constant">U+5C</code>) between quotatian marks have special meaning defined
by the following character.

</p><div class="informaltable"><table style="border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col width="25%"/><col width="75%"/></colgroup><tbody><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\0</code></td><td style="border-bottom: 0.5pt solid ; ">null character, <code class="constant">U+0</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\a</code></td><td style="border-bottom: 0.5pt solid ; ">bell character, <code class="constant">U+7</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\t</code></td><td style="border-bottom: 0.5pt solid ; ">tab character, <code class="constant">U+9</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\n</code></td><td style="border-bottom: 0.5pt solid ; ">end of line character, <code class="constant">U+A</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\f</code></td><td style="border-bottom: 0.5pt solid ; ">end of page character, <code class="constant">U+C</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\r</code></td><td style="border-bottom: 0.5pt solid ; ">carriage return character, <code class="constant">U+D</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\e</code></td><td style="border-bottom: 0.5pt solid ; ">escape character, <code class="constant">U+1B</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\"</code></td><td style="border-bottom: 0.5pt solid ; ">double quote character <code class="literal">"</code>, <code class="constant">U+22</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\\</code></td><td style="border-bottom: 0.5pt solid ; ">backslash character <code class="literal">\</code>, <code class="constant">U+5C</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\u<em class="replaceable"><code>XXXX</code></em></code></td><td style="border-bottom: 0.5pt solid ; ">Unicode code unit <code class="constant">U+<em class="replaceable"><code>XXXX</code></em></code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\x{<em class="replaceable"><code>XXXXXXXX</code></em>}</code></td><td style="border-bottom: 0.5pt solid ; ">Unicode code point <code class="constant">U+<em class="replaceable"><code>XXXXXXXX</code></em></code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\N{<em class="replaceable"><code>name</code></em>}</code></td><td style="border-bottom: 0.5pt solid ; ">Unicode character named <em class="replaceable"><code>name</code></em> <em><span class="remark">(not implemented)</span></em></td></tr><tr><td style="border-right: 0.5pt solid ; "><code class="literal">\c<em class="replaceable"><code>C</code></em></code></td><td style="">for
<em class="replaceable"><code>C</code></em> character within the
range <code class="constant">U+0‥3F</code>, increment character’s code by 64, for
character within the range <code class="constant">U+40‥7F</code>, decrement the code
by 64
</td></tr></tbody></table></div><p>

</p><p class="remark"><em><span class="remark">TODO</span></em></p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_Syntax_Names"/>2.2.4. Names</h3></div></div></div><p>
There are two syntatctic form of names:
<em class="firstterm">quoted</em><a id="d0e656" class="indexterm"/>
and
<em class="firstterm">unquoted</em><a id="d0e664" class="indexterm"/>.
</p><p>
A quoted name is surrounded by single quotation characters
(<code class="literal">'</code>, <code class="constant">U+27</code>). Any occurence of the
quotation character itself must be prefixed by the backslash character
(<code class="literal">\</code>, <code class="constant">U+5C</code>).
</p><p>
An unquoted
<em class="firstterm">name</em><a id="d0e688" class="indexterm"/>
consists of letters from <code class="literal">A</code> to <code class="literal">Z</code> and
from <code class="literal">a</code> to <code class="literal">z</code>
(<code class="constant">U+41‥5A</code>, <code class="constant">U+61‥7A</code>), decimal digits
(<code class="constant">U+30‥39</code>), underscore
(<code class="literal">_</code>, <code class="constant">U+5F</code>), period
(<code class="literal">.</code>, <code class="constant">U+2E</code>), plus (<code class="literal">+</code>,
<code class="constant">U+2B</code>), hyphen-minus (<code class="literal">-</code>,
<code class="constant">U+2D</code>), equals sign (<code class="literal">=</code>,
<code class="constant">U+3D</code>), dollar sign (<code class="literal">$</code>,
<code class="constant">U+24</code>) and does not begin with a decimal digit. A name
preceded by the slash character (<code class="literal">/</code>,
<code class="constant">U+2F</code>).
</p><p class="remark"><em><span class="remark">TODO</span></em></p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_Syntax_Commands"/>2.2.5. Commands</h3></div></div></div><p class="remark"><em><span class="remark">TODO</span></em></p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_Syntax_Procedures"/>2.2.6. Procedures</h3></div></div></div><p>
The curly bracket characters (<code class="literal">{</code>, <code class="constant">U+7B</code>
and <code class="literal">}</code>, <code class="constant">U+7D</code>) are used to create
<em class="firstterm">procedures</em><a id="d0e781" class="indexterm"/>.
</p><p>
When the parser encounters the <code class="literal">{</code> character, it continues to
scan and create objects, but they are not executed by the interpreter. When the
parser encounters the corresponding <code class="literal">}</code> character, it puts all
the objects created after the <code class="literal">{</code> character into a new
procedure object. So, the interpretation of the program fragment

</p><pre class="programlisting">{ <span class="hl-number">1</span> <span class="hl-keyword">exch</span> <span class="hl-keyword">div</span> }</pre><p>

leads to the creation of a procedure object that contains an integer numeric
object <code class="code"><span class="hl-number">1</span></code> and two command objects <code class="code"><span class="hl-keyword">exch</span></code> and <code class="code"><span class="hl-keyword">div</span></code>.
</p><p>
The interpreter does not execute the procedure, instead, it puts it on the
operand stack. The procedure will be executed only at the result of its
invocation. The execution of the procedure (and all of its constituent objects)
is
<em class="firstterm">deferred</em><a id="d0e812" class="indexterm"/>).
The meaning of the deferred execution is explained in <a class="xref" href="PsyllaReference_Language.xhtml#PsyllaReference_Language_ObjectExecution" title="2.5. Execution of Objects">Section 2.5, “Execution of Objects”</a>.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_Syntax_RegExps"/>2.2.7. Regular Expressions</h3></div></div></div><p class="remark"><em><span class="remark">TODO</span></em></p></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="PsyllaReference_Language_CoreTypes"/>2.3. Core Types</h2></div></div></div><p>
All data in the Psylla language exist in form of
<em class="firstterm">objects</em><a id="d0e832" class="indexterm"/>.
Most of the objects created and handled by operators. Some types of objects are
also created by the parser and executed by the interpreter.
</p><p>
Each object belongs to a certain
<em class="firstterm">type</em><a id="d0e840" class="indexterm"/>.
Object type affects the way that will be handled by operators. Types are
divided into
<em class="firstterm">simple</em><a id="d0e846" class="indexterm"/>
and
<em class="firstterm">complex</em><a id="d0e854" class="indexterm"/>.
</p><p>
Objects of simple types can not be changed, they are only created as the result
of calculations. For example, the <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_neg" title="4.2.151. neg"><code class="token"><span class="hl-keyword">neg</span></code></a> operator does not change the
sign of the number itself, but creates a new numeric object with different
sign.
</p><p>
The objects of complex types can change its state. For example, the <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_put" title="4.2.169. put"><code class="token"><span class="hl-keyword">put</span></code></a> operator
replaces the array element having the given index.
</p><p>
The following is a summary of simple and complex types composing the Psylla
language core. Language extensions may introduce new object types.
</p><div class="informaltable"><table width="100%" style="border: none;"><colgroup><col width="50%"/><col width="50%"/></colgroup><tbody valign="top"><tr><td style="" valign="top">
<div class="itemizedlist"><div class="itemizedlist-title">Simple Types</div><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_biginteger" title="3.1.7. biginteger"><span class="type">biginteger</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_boolean" title="3.1.12. boolean"><span class="type">boolean</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_command" title="3.1.16. command"><span class="type">command</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_complex" title="3.1.17. complex"><span class="type">complex</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_integer" title="3.1.33. integer"><span class="type">integer</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_mark" title="3.1.38. mark"><span class="type">mark</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_name" title="3.1.40. name"><span class="type">name</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_null" title="3.1.42. null"><span class="type">null</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_operator" title="3.1.45. operator"><span class="type">operator</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_real" title="3.1.52. real"><span class="type">real</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_regexp" title="3.1.54. regexp"><span class="type">regexp</span></a></li></ul></div>
</td><td style="" valign="top">
<div class="itemizedlist"><div class="itemizedlist-title">Complex Types</div><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_array" title="3.1.4. array"><span class="type">array</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_bitarray" title="3.1.8. bitarray"><span class="type">bitarray</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_bitset" title="3.1.9. bitset"><span class="type">bitset</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_dict" title="3.1.25. dict"><span class="type">dict</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_input" title="3.1.32. input"><span class="type">input</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_lock" title="3.1.36. lock"><span class="type">lock</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_matcher" title="3.1.39. matcher"><span class="type">matcher</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_output" title="3.1.46. output"><span class="type">output</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_proc" title="3.1.47. proc"><span class="type">proc</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_random" title="3.1.49. random"><span class="type">random</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_reader" title="3.1.51. reader"><span class="type">reader</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_set" title="3.1.57. set"><span class="type">set</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_string" title="3.1.59. string"><span class="type">string</span></a></li><li class="listitem"><a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_writer" title="3.1.65. writer"><span class="type">writer</span></a></li></ul></div>
</td></tr></tbody></table></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_CoreTypes_Operators"/>2.3.1. Operators</h3></div></div></div><p>
The
<em class="firstterm">operator</em><a id="d0e943" class="indexterm"/>
in the Psylla language represents a code that manipulates the interpreter. The
oparator objects have the <a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_operator" title="3.1.45. operator"><span class="type">operator</span></a>
type. All core operators are initially placed in the system dictionary and
accessible by their names. Operators can not be created or modified by the
Psylla program.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_CoreTypes_Numbers"/>2.3.2. Numbers</h3></div></div></div><p>
The Psylla language provides four numeric types: integer (<a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_integer" title="3.1.33. integer"><span class="type">integer</span></a>), real
(<a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_real" title="3.1.52. real"><span class="type">real</span></a>),
complex (<a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_complex" title="3.1.17. complex"><span class="type">complex</span></a>), and big integer (<a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_biginteger" title="3.1.7. biginteger"><span class="type">biginteger</span></a>).
</p><p>
The integer numeric object represents a mathematical integer number in the
range from

<math xmlns="http://www.w3.org/1998/Math/MathML" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink">
	<mo>−</mo>
	<msup>
		<mn>2</mn>
		<mn>63</mn>
	</msup>
</math>

to

<math xmlns="http://www.w3.org/1998/Math/MathML" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink">
	<msup>
		<mn>2</mn>
		<mn>63</mn>
	</msup>
	<mo>−</mo>
	<mn>1</mn>
</math>

inclusive.
</p><p>
The real numeric object represents a mathematical real number in much larger
renge, but with limited accuracy, and is implemented as a floating-point number.
</p><p>
The complex numeric object represents a mathematical complex number. It is
implemented as a pair of real numbers, real and imaginary parts of a number.
</p><p>
The big integer numeric object represents a mathematical integer number of
arbitrary magnitude.
</p><p>
Most of mathematical operators can be applied to operands of all four types,
performing the required type conversion if necessary.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_CoreTypes_Booleans"/>2.3.3. Booleans</h3></div></div></div><p>
Boolean objects (<a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_boolean" title="3.1.12. boolean"><span class="type">boolean</span></a>) represents logical values “false” and “true”. Their
main purpose is to serve as operands for conditional control operators <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_if" title="4.2.116. if"><code class="token"><span class="hl-keyword">if</span></code></a> and <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_ifelse" title="4.2.117. ifelse"><code class="token"><span class="hl-keyword">ifelse</span></code></a>. Both
boolean objects present in the system dictionary under the names of <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_false" title="4.2.86. false"><code class="token"><span class="hl-keyword">false</span></code></a> and
<a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_true" title="4.2.230. true"><code class="token"><span class="hl-keyword">true</span></code></a>.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_CoreTypes_Marks"/>2.3.4. Mark</h3></div></div></div><p>
The
<em class="firstterm">mark</em><a id="d0e1027" class="indexterm"/> is
the sole object of type <a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_mark" title="3.1.38. mark"><span class="type">mark</span></a>. It serves to indicate the position in the operand
stack.  The mark present in the system dictionary under the names of <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_mark" title="4.2.141. mark"><code class="token"><span class="hl-keyword">mark</span></code></a> (<a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_[" title="4.2.6. ["><code class="token"><span class="hl-structure">[</span></code></a>, <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_&lt;" title="4.2.3. &lt;"><code class="token"><span class="hl-structure">&lt;</span></code></a>, <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_(" title="4.2.1. ("><code class="token"><span class="hl-structure">(</span></code></a>).
Basically marks serves as operands for operators <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_arraytomark" title="4.2.17. arraytomark"><code class="token"><span class="hl-keyword">arraytomark</span></code></a>
(<a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_]" title="4.2.7. ]"><code class="token"><span class="hl-structure">]</span></code></a>),
<a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_dicttomark" title="4.2.66. dicttomark"><code class="token"><span class="hl-keyword">dicttomark</span></code></a> (<a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_&gt;" title="4.2.4. &gt;"><code class="token"><span class="hl-structure">&gt;</span></code></a>), <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_settomark" title="4.2.195. settomark"><code class="token"><span class="hl-keyword">settomark</span></code></a>
(<a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_)" title="4.2.2. )"><code class="token"><span class="hl-structure">)</span></code></a>),
<a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_counttomark" title="4.2.56. counttomark"><code class="token"><span class="hl-keyword">counttomark</span></code></a>, <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_cleartomark" title="4.2.40. cleartomark"><code class="token"><span class="hl-keyword">cleartomark</span></code></a>.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_CoreTypes_Nulls"/>2.3.5. Null object</h3></div></div></div><p>
A special <a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_null" title="3.1.42. null"><span class="type">null</span></a> type contains a sole object. This object serves as a
placeholder in containers whose elements have not yet been initialized. Mostly
null objects appear in arrays when their size increase. Null object present in
the system dictionary under the name <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_null" title="4.2.156. null"><code class="token"><span class="hl-keyword">null</span></code></a>. It can
not be the operand for most operators.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_CoreTypes_Names"/>2.3.6. Names</h3></div></div></div><p>
A <em class="firstterm">name</em><a id="d0e1073" class="indexterm"/>
object (<a class="xref" href="PsyllaReference_Types.xhtml#PsyllaReference_Types_Details_name" title="3.1.40. name"><span class="type">name</span></a>) represents an immutable string. The names are
mostly used as keys in the dictionaries associated to corresponding values.
Every core operator is stored in the system dictionary under its own name.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_CoreTypes_Commands"/>2.3.7. Commands</h3></div></div></div><p>
The
<em class="firstterm">commands</em><a id="d0e1086" class="indexterm"/>
(<em class="firstterm">executable
names</em><a id="d0e1092" class="indexterm"/>)
differ from the names in execution semantics. The execution of the command
leads to the search of the object associated with it in the dictionary stack,
and the subsequent invocation of the found object.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_CoreTypes_Arrays"/>2.3.8. Arrays</h3></div></div></div><p>
The <em class="firstterm">array</em><a id="d0e1105" class="indexterm"/>
is a container for objects numbered with non-negative integer numbers
(<em class="firstterm">indices</em><a id="d0e1111" class="indexterm"/>).
Arrays in the Psylla language are
<em class="firstterm">heterogeneous</em><a id="d0e1119" class="indexterm"/>,
that is, the array elements can be objects of any type. In particular, the
arrays may contain other containers (arrays, dictionaries, sets), which allows
the construction of multi-dimensional data structures of any complexity.
</p><p>
The array indexing is zero-based. When accessing the array elements, the index
boundary checks are performed. In case the index runs beyond the boundaries,
the <a class="xref" href="PsyllaReference_Errors.xhtml#PsyllaReference_Errors_Details_rangecheck" title="5.1.16. rangecheck"><span class="errorname">rangecheck</span></a> error is generated.
</p><p>
The length of the array changes when inserting or removing elements.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_CoreTypes_Procedures"/>2.3.9. Procedures</h3></div></div></div><p>
A
<em class="firstterm">procedure</em><a id="d0e1138" class="indexterm"/>
(<em class="firstterm">executable
array</em><a id="d0e1144" class="indexterm"/>)
differ from the array in execution semantics. The execution of the procedure
leads to sequential execution of all its elements.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_CoreTypes_Strings"/>2.3.10. Strings</h3></div></div></div><p>
A <em class="firstterm">string</em><a id="d0e1157" class="indexterm"/>
conceptually arranged as an array whose elements are integers between <math xmlns="http://www.w3.org/1998/Math/MathML" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink"><mn>0</mn></math> and <math xmlns="http://www.w3.org/1998/Math/MathML" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink"><mn>65535</mn></math> inclusive (<em class="firstterm">code
units</em><a id="d0e1171" class="indexterm"/>).
</p><p>
Strings are used to store text. Each character of text is represented by one or
two code units in accordance with the encoding
<em class="firstterm"><acronym class="acronym">UTF-16</acronym></em><a id="d0e1180" class="indexterm"/>.
One code unit encodes a character of the <em class="firstterm">basic multilingual
plane</em><a id="d0e1186" class="indexterm"/>
(<acronym class="acronym">BMP</acronym><a id="d0e1192" class="indexterm"/>).  The remaining Unicode
characters are encoded with so-called <em class="firstterm">surrogate
pairs</em><a id="d0e1202" class="indexterm"/>.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_CoreTypes_Dictionaries"/>2.3.11. Dictionaries</h3></div></div></div><p>
A
<em class="firstterm">dictionary</em><a id="d0e1213" class="indexterm"/>
is a container for objects indexed with names. Such structures also called
<em class="firstterm">associative
arrays</em><a id="d0e1219" class="indexterm"/>.
</p><p>
The interpreter intensively uses dictionaries to associate objects (typically
operators and procedures) with names. Each time the parser detects a command,
the interpreter searches the dictionary stack for an object associated withe
the name of the command, and then executes the found object.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_CoreTypes_RegExps"/>2.3.12. Regular Expressions</h3></div></div></div><p>
<em class="firstterm">Regular expression</em><a id="d0e1234" class="indexterm"/> represents a template for search in a string.
</p><div class="section"><div class="titlepage"><div><div><h4 class="title"><a id="PsyllaReference_Language_CoreTypes_RegExps_Characters"/>2.3.12.1. Characters</h4></div></div></div><div class="informaltable"><table width="100%" style="border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col width="25%"/><col width="75%"/></colgroup><tbody><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal"><em class="replaceable"><code>X</code></em></code></td><td style="border-bottom: 0.5pt solid ; ">character <em class="replaceable"><code>X</code></em></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\\</code></td><td style="border-bottom: 0.5pt solid ; ">backslash character, <code class="constant">U+5C</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\u<em class="replaceable"><code>HHHH</code></em></code></td><td style="border-bottom: 0.5pt solid ; ">character <code class="constant">U+<em class="replaceable"><code>HHHH</code></em></code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\x{<em class="replaceable"><code>H…H</code></em>}</code></td><td style="border-bottom: 0.5pt solid ; ">character <code class="constant">U+<em class="replaceable"><code>H…H</code></em></code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\t</code></td><td style="border-bottom: 0.5pt solid ; ">tab character, <code class="constant">U+9</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\n</code></td><td style="border-bottom: 0.5pt solid ; ">end of line character, <code class="constant">U+A</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\r</code></td><td style="border-bottom: 0.5pt solid ; ">carriage-return character, <code class="constant">U+D</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\f</code></td><td style="border-bottom: 0.5pt solid ; ">line feed character, <code class="constant">U+C</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\a</code></td><td style="border-bottom: 0.5pt solid ; ">bell character, <code class="constant">U+7</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\e</code></td><td style="border-bottom: 0.5pt solid ; ">escape character, <code class="constant">U+1B</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\~</code></td><td style="border-bottom: 0.5pt solid ; ">tilde character <code class="literal">~</code>, <code class="constant">U+7E</code></td></tr><tr><td style="border-right: 0.5pt solid ; "><code class="literal">\c<em class="replaceable"><code>X</code></em></code></td><td style="">control+<em class="replaceable"><code>X</code></em> character</td></tr></tbody></table></div></div><div class="section"><div class="titlepage"><div><div><h4 class="title"><a id="PsyllaReference_Language_CoreTypes_RegExps_CharacterClasses"/>2.3.12.2. Character Classes</h4></div></div></div><div class="informaltable"><table width="100%" style="border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col width="25%"/><col width="75%"/></colgroup><tbody><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">[abc]</code></td><td style="border-bottom: 0.5pt solid ; "><code class="literal">a</code>, <code class="literal">b</code> or <code class="literal">c</code> (simple class)</td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">[^abc]</code></td><td style="border-bottom: 0.5pt solid ; ">any character except <code class="literal">a</code>, <code class="literal">b</code> and <code class="literal">c</code> (negation)</td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">[A-Za-z]</code></td><td style="border-bottom: 0.5pt solid ; "><code class="literal">A</code> through <code class="literal">Z</code> or
<code class="literal">a</code> through <code class="literal">z</code>, inclusive (range)</td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">[A-Z[0-9]]</code></td><td style="border-bottom: 0.5pt solid ; "><code class="literal">A</code> through <code class="literal">Z</code> or
<code class="literal">a</code> through <code class="literal">z</code> (union)</td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">[A-P&amp;&amp;[M-Z]]</code></td><td style="border-bottom: 0.5pt solid ; "><code class="literal">P</code> through <code class="literal">M</code> (intersection)</td></tr><tr><td style="border-right: 0.5pt solid ; "><code class="literal">[A-Z&amp;&amp;[^M-P]]</code></td><td style=""><code class="literal">A</code> through <code class="literal">L</code> or
<code class="literal">Q</code> through <code class="literal">Z</code> (subtraction)</td></tr></tbody></table></div></div><div class="section"><div class="titlepage"><div><div><h4 class="title"><a id="PsyllaReference_Language_CoreTypes_RegExps_PredefinedCharacterClasses"/>2.3.12.3. Predefined Character Classes</h4></div></div></div><div class="informaltable"><table width="100%" style="border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col width="25%"/><col width="75%"/></colgroup><tbody><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">.</code></td><td style="border-bottom: 0.5pt solid ; ">any character</td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\d</code></td><td style="border-bottom: 0.5pt solid ; ">decimal digit, <code class="literal">[0-9]</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\D</code></td><td style="border-bottom: 0.5pt solid ; ">not decimal digit, <code class="literal">[^0-9]</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\s</code></td><td style="border-bottom: 0.5pt solid ; ">whitespace character, <code class="literal">[ \t\n\r\f\x{0B}]</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\S</code></td><td style="border-bottom: 0.5pt solid ; ">non-whitespace character, <code class="literal">[^ \t\n\r\f\x{0B}]</code></td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\w</code></td><td style="border-bottom: 0.5pt solid ; ">word character, <code class="literal">[A-Za-z_\d]</code></td></tr><tr><td style="border-right: 0.5pt solid ; "><code class="literal">\W</code></td><td style="">non-word character, <code class="literal">[^A-Za-z_\d]</code></td></tr></tbody></table></div></div><div class="section"><div class="titlepage"><div><div><h4 class="title"><a id="PsyllaReference_Language_CoreTypes_RegExps_POSIXCharacterClasses"/>2.3.12.4. <acronym class="acronym">POSIX</acronym> Character Classes</h4></div></div></div></div><div class="section"><div class="titlepage"><div><div><h4 class="title"><a id="PsyllaReference_Language_CoreTypes_RegExps_BoundaryAnchors"/>2.3.12.5. Boundary Anchors</h4></div></div></div><div class="informaltable"><table width="100%" style="border-collapse: collapse;border-top: 0.5pt solid ; border-bottom: 0.5pt solid ; border-left: 0.5pt solid ; border-right: 0.5pt solid ; "><colgroup><col width="25%"/><col width="75%"/></colgroup><tbody><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">^</code></td><td style="border-bottom: 0.5pt solid ; ">beginning of the string</td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">$</code></td><td style="border-bottom: 0.5pt solid ; ">end of the string</td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\b</code></td><td style="border-bottom: 0.5pt solid ; ">word boundary</td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\B</code></td><td style="border-bottom: 0.5pt solid ; ">not word boundary</td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\A</code></td><td style="border-bottom: 0.5pt solid ; ">beginning of input</td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\G</code></td><td style="border-bottom: 0.5pt solid ; ">end of input</td></tr><tr><td style="border-right: 0.5pt solid ; border-bottom: 0.5pt solid ; "><code class="literal">\Z</code></td><td style="border-bottom: 0.5pt solid ; ">TODO</td></tr><tr><td style="border-right: 0.5pt solid ; "><code class="literal">\z</code></td><td style="">TODO</td></tr></tbody></table></div></div></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="PsyllaReference_Language_Stacks"/>2.4. Stacks</h2></div></div></div><p>
The Psylla interpreter supports several stacks intended to store data during
the program execution or represent the program execution state. Three of them
are essential: the <em class="firstterm">operand
stack</em><a id="d0e1587" class="indexterm"/>, the
<em class="firstterm">dictionary stack</em><a id="d0e1593" class="indexterm"/> and the <em class="firstterm">execution
stack</em><a id="d0e1599" class="indexterm"/>.
</p><p>
Каждый из стеков устроен по принципу <acronym class="acronym">LIFO</acronym> — <span xml:lang="en" class="foreignphrase"><em xml:lang="en" class="foreignphrase">Last In—First Out</em></span> (последний пришёл — первый ушёл).
</p><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_Stacks_OperandStack"/>2.4.1. Operand Stack</h3></div></div></div><p>
Execution of literal objects always leads to add to the operand stack. If the
operator needs the data to handle, it remove the necesser number of objects
from the operand stack. The objects created by the operator are added to the stack.
Так действует большинство операторов языка. Таким
образом, свободно манипулировать стеком операндов может как интерпретатор, так
и любой из операторов.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_Stacks_DictionaryStack"/>2.4.2. Dictionary Stack</h3></div></div></div><p>
The dictionary stack can store only dictionaries. The current stack of the
dictionary stack serves as a context of search for objects by name. The need
for such a search occurs every time the interpreter encounters a command. There
are several operators to manipulate the dictionary stack.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_Stacks_ExecutionStack"/>2.4.3. Execution Stack</h3></div></div></div><p>
The execution stack reflects the execution phase of the procedure. During
execution of the procedure its elements are loaded onto the execution stack in
reverse order, so that the very first element is at the top of the stack. The
interpreter then in turn removes objects from the execution stack and executes
them until the stack level is equal to the original (that was at the beginning
of the procedure execution).
</p><p>
The execution stack may be controlled by the interpreter. Only a few operators
directly operating the execution stack. This is control operators that
implement cycles.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_Stacks_Auxiliary"/>2.4.4. Auxiliary Stacks</h3></div></div></div><p>
In addition to three main stacks, there are several auxiliary stacks built into
the interpreter: <em class="firstterm">exit stack</em><a id="d0e1635" class="indexterm"/> и <em class="firstterm">stop
stack</em><a id="d0e1641" class="indexterm"/>. Only a
few control operators operate on auxiliary stacks.
</p></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="PsyllaReference_Language_ObjectExecution"/>2.5. Execution of Objects</h2></div></div></div><p>
Смысл исполнения объекта зависит от его типа, а также от того, получен этот
объект парсером или же другим способом. Здесь нужно отметить, что существует
лишь два типа исполненяемых объектов, получаемых непосредственно парсером — это
процедуры и команды.

</p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem">
Исполняемый оператор вызывается, то есть выполняется запрограммированное в нём
действие.
</li><li class="listitem">
Объекты всех прочих типов загружаются на стек операндов.
</li></ul></div><p>

</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="PsyllaReference_Language_EarlyNameBinding"/>2.6. Early Name Binding</h2></div></div></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_EarlyNameBinding_BindOperator"/>2.6.1. The <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_bind" title="4.2.23. bind"><code class="token"><span class="hl-keyword">bind</span></code></a> operator</h3></div></div></div></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_EarlyNameBinding_Immediate"/>2.6.2. Immediate Names</h3></div></div></div></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="PsyllaReference_Language_IO"/>2.7. Input and Output</h2></div></div></div><p>
A <em class="firstterm">file</em><a id="d0e1674" class="indexterm"/> is
a sequence of
<em class="firstterm">characters</em><a id="d0e1680" class="indexterm"/>,
usually the final. The file can be located in the file system or be created on
the fly. Input/output operations are designed for exchange of character data
between files and a program. I/O is the primary means of interaction between a
program and its enviroment.
</p><p>
The characters identified with the integers on the range
from <code class="constant">0</code> to <code class="constant">8589934591</code> in accordance
with the universal character set <acronym class="acronym">UCS-4</acronym>. At the physical
level, data in a file are represented as a sequence of bytes (octets). Some
transformation that turns a sequence of octets into a sequence of characters
(encoding) or vice versa (decoding) may be performed during I/O.
</p><p>
On input of character data a file is considered as a source of characters, on
output as a consumer. It is possible to input or output both individual
characters and strings.
</p><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_IO_BasicOperators"/>2.7.1. Basic Input/Output Operators</h3></div></div></div><p>
Operators <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_read" title="4.2.173. read"><code class="token"><span class="hl-keyword">read</span></code></a> and <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_write" title="4.2.242. write"><code class="token"><span class="hl-keyword">write</span></code></a>,
respectively read from a file or write to a file one character.
</p><p>
Operators <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_readstring" title="4.2.176. readstring"><code class="token"><span class="hl-keyword">readstring</span></code></a> and <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_writestring" title="4.2.243. writestring"><code class="token"><span class="hl-keyword">writestring</span></code></a>
respectively read from a file or write to a file a character string. The <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_readline" title="4.2.174. readline"><code class="token"><span class="hl-keyword">readline</span></code></a>
operator read from a file a string terminated by the platform-specific line
terminator. Terminator itself is available in the system dictionary by the
name <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_eol" title="4.2.74. eol"><code class="token"><span class="hl-keyword">eol</span></code></a>.
</p></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="PsyllaReference_Language_MultipleContextExecution"/>2.8. Multiple Context Execution</h2></div></div></div><p>
The Psylla language has support for asynchronous <em class="firstterm">execution
contexts</em><a id="d0e1723" class="indexterm"/>. The execution context is a separate interpreter
instance.
</p><p>
Each context creates an environment for executing program, consisting of
stacks. Different contexts share the common dictionary stack. The rest of the
stacks (operand stack, execution stack, auxiliary stacks) are private and can
not be seen outside their context.
</p><p>
The main context is created for the execution of the program. The program can
create additional contexts, executing the <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_fork" title="4.2.103. fork"><code class="token"><span class="hl-keyword">fork</span></code></a> operator.
</p><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_MultipleContextExecution_Creation"/>2.8.1. Creating Contexts</h3></div></div></div><p>
The <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_fork" title="4.2.103. fork"><code class="token"><span class="hl-keyword">fork</span></code></a> operator returns a new context.
One of the <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_fork" title="4.2.103. fork"><code class="token"><span class="hl-keyword">fork</span></code></a> operands is a procedure that is
executed in the new context, and the remaining operands are used to initialize
the operand stack in a new context.
</p><p>
The <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_join" title="4.2.130. join"><code class="token"><span class="hl-keyword">join</span></code></a> operator waits for the
completion of the procedure being executed in the context previously created by
the <a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_fork" title="4.2.103. fork"><code class="token"><span class="hl-keyword">fork</span></code></a> operator, and then copies the
contents of the operand stack to the operand stack of the context that invoked
<a class="xref" href="PsyllaReference_Operators.xhtml#PsyllaReference_Operators_Details_join" title="4.2.130. join"><code class="token"><span class="hl-keyword">join</span></code></a>.
</p></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_MultipleContextExecution_Operators"/>2.8.2. Context Operators</h3></div></div></div></div><div class="section"><div class="titlepage"><div><div><h3 class="title"><a id="PsyllaReference_Language_MultipleContextExecution_Synchronization"/>2.8.3. Context Synchronization</h3></div></div></div></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="PsyllaReference_Language_Errors"/>2.9. Errors</h2></div></div></div><p>
Various errors can occur while a program executes. Some of them are generated
by the interpreter. Others arise during execution of the operators, for
example, the operand type mismatch error or operand stack underflow error.
</p><p>
There are several types of errors. A name corresponds to each type of error,
for example, <a class="xref" href="PsyllaReference_Errors.xhtml#PsyllaReference_Errors_Details_typecheck" title="5.1.20. typecheck"><span class="errorname">typecheck</span></a> or <a class="xref" href="PsyllaReference_Errors.xhtml#PsyllaReference_Errors_Details_stackunderflow" title="5.1.18. stackunderflow"><span class="errorname">stackunderflow</span></a>. A detailed
description of the different error types found in the <a class="xref" href="PsyllaReference_Errors.xhtml" title="Chapter 5. Errors">Chapter 5, <em>Errors</em></a>.
</p><p>
The handling of all types of errors is performed uniformly.
</p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="PsyllaReference_Language_Grammar"/>2.10. Grammar</h2></div></div></div><table width="100%" cellpadding="5" style="background-color: none" class="productionset" summary="EBNF for Grammar rules for tokens"><tr><th align="left" valign="top" class="productionset">Grammar rules for tokens</th></tr><tr><td><table border="0" width="99%" cellpadding="0" style="background-color: none" class="productionset" summary="EBNF productions"><tr><td align="left" valign="top">[1]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_Token"/>TOKEN</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Integer">INTEGER</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_IntegerHexadecimal">INTEGER_HEXADECIMAL</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_IntegerBinary">INTEGER_BINARY</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Char">CHAR</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Real">REAL</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_String">STRING</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_RegExp">REGEXP</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Command">COMMAND</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Name">NAME</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Immediate">IMMEDIATE</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_OpenBrace">OPEN_BRACE</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_CloseBrace">CLOSE_BRACE</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Comment">COMMENT</a>
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[2]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_Sign"/>SIGN</td><td valign="top" align="center"><code>::=</code></td><td valign="top">[<code class="constant">"+"</code>, <code class="constant">"-"</code>]</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[3]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_Digit"/>DIGIT</td><td valign="top" align="center"><code>::=</code></td><td valign="top">[<code class="constant">"0"</code> - <code class="constant">"9"</code>]</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[4]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_IntegerUnsigned"/>INTEGER_UNSIGNED</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Digit">DIGIT</a>+
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[5]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_Integer"/>INTEGER</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Sign">SIGN</a>?
<a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_IntegerUnsigned">INTEGER_UNSIGNED</a>
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[6]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_HexDigit"/>HEXDIGIT</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Digit">DIGIT</a>
| [<code class="constant">"A"</code> - <code class="constant">"F"</code>,
<code class="constant">"a"</code> - <code class="constant">"f"</code>]
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[7]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_IntegerHexadecimal"/>INTEGER_HEXADECIMAL</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Sign">SIGN</a>?
<code class="constant">"0"</code>
[<code class="constant">"X"</code>,
<code class="constant">"x"</code>]
<a href="PsyllaReference_Language_Grammar_HexDigit">HEXDIGIT</a>+</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[8]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_IntegerBinary"/>INTEGER_BINARY</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<a href="PsyllaReference_Language_Grammar_Sign">SIGN</a>?
<code class="constant">"0"</code>
[<code class="constant">"B"</code>, <code class="constant">"b"</code>]
[<code class="constant">"0"</code>, <code class="constant">"1"</code>]+
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[9]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_Char"/>CHAR</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<code class="constant">"`"</code>
(~[<code class="constant">"\\"</code>]
| <a href="PsyllaReference_Language_Grammar_StringSpecial">STRING_SPECIAL</a>)
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[10]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_RealUnsigned"/>REAL_UNSIGNED</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
(<a href="PsyllaReference_Language_Grammar_IntegerUnsigned">INTEGER_UNSIGNED</a>
(<code class="constant">"."</code>
<a href="">DIGIT</a>*)?
| <code class="constant">"."</code>
<a href="PsyllaReference_Language_Grammar_IntegerUnsigned">INTEGER_UNSIGNED</a>)
<a href="PsyllaReference_Language_Grammar_Exponent">EXPONENT</a>?
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[11]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_Real"/>REAL</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Sign">SIGN</a>?
<a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_RealUnsigned">REAL_UNSIGNED</a>
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[12]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_Exponent"/>EXPONENT</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
[<code class="constant">"E"</code>, <code class="constant">"e"</code>]
<a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Integer">INTEGER</a>
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[13]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_Comment"/>COMMENT</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_CommentOneLine">COMMENT_ONELINE</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_CommentMultiline">COMMENT_MULTILINE</a>
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[14]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_CommentOneLine"/>COMMENT_ONELINE</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<code class="constant">"#"</code>
(~[<code class="constant">"\n"</code>])*
<code class="constant">"\n"</code>
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[15]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_CommentMultiline"/>COMMENT_MULTILINE</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<code class="constant">"/#"</code>
(~[<code class="constant">"/"</code>]
| (<code class="constant">"/"</code> ~[<code class="constant">"#"</code>]))*
<code class="constant">"#/"</code>
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[16]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_String"/>STRING</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<code class="constant">"\""</code>
(<a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_StringSpecial">STRING_SPECIAL</a>
| ~[ <code class="constant">"\""</code>,
<code class="constant">"\\"</code>])*
<code class="constant">"\""</code>
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[17]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_StringSpecial"/>STRING_SPECIAL</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<code class="constant">"\\"</code>
([<code class="constant">"0"</code>,
<code class="constant">"a"</code>,
<code class="constant">"n"</code>,
<code class="constant">"t"</code>,
<code class="constant">"f"</code>,
<code class="constant">"\""</code>,
<code class="constant">"\\"</code>,
<code class="constant">"e"</code>,
<code class="constant">"r"</code>,
<code class="constant">"\n"</code>]
<br/>
| <code class="constant">"u"</code>
<a href="PsyllaReference_Language_Grammar_HexDigit">HEXDIGIT</a>{4}
| <code class="constant">"x{"</code>
<a href="PsyllaReference_Language_Grammar_HexDigit">HEXDIGIT</a>+
<code class="constant">"}"</code>
| <code class="constant">"c"</code>
[<code class="constant">"\u0000" - "\u00FF"</code>])
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[18]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_RegExp"/>REGEXP</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<code class="constant">"~"</code>
(<a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_StringSpecial">STRING_SPECIAL</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_RegExpSpecial">REGEXP_SPECIAL</a>
| ~[<code class="constant">"~"</code>,
<code class="constant">"\\"</code>])*
<code class="constant">"~"</code>
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[19]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_RegExpSpecial"/>REGEXP_SPECIAL</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<code class="constant">"\\"</code>
(~[])
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[20]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_Name"/>NAME</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<code class="constant">"/"</code>
<a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Command">COMMAND</a>
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[21]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_Immediate"/>IMMEDIATE</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
<code class="constant">"/"</code>
<a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Name">NAME</a>
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[22]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_Command"/>COMMAND</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
(<a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Letter">LETTER</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_NameSpecialChar">NAME_SPECIAL_CHAR</a>)
(<a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Letter">LETTER</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_NameSpecialChar">NAME_SPECIAL_CHAR</a>
| <a href="PsyllaReference_Language.xhtml#PsyllaReference_Language_Grammar_Digit">DIGIT</a>)*<br/>
| [<code class="constant">"["</code>,
<code class="constant">"]"</code>,
<code class="constant">"("</code>,
<code class="constant">")"</code>,
<code class="constant">"&lt;"</code>,
<code class="constant">"&gt;"</code>,
<code class="constant">"="</code>,
<code class="constant">"?"</code>]
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[23]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_OpenBrace"/>OPEN_BRACE</td><td valign="top" align="center"><code>::=</code></td><td valign="top"><code class="constant">"{"</code></td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[24]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_CloseBrace"/>CLOSE_BRACE</td><td valign="top" align="center"><code>::=</code></td><td valign="top"><code class="constant">"}"</code></td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[25]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_Letter"/>LETTER</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
[<code class="constant">"A"</code> - <code class="constant">"Z"</code>,
<code class="constant">"a"</code> - <code class="constant">"z"</code>]
</td><td align="left" valign="top"> </td></tr><tr><td align="left" valign="top">[26]</td><td align="right" valign="top"><a id="PsyllaReference_Language_Grammar_NameSpecialChar"/>NAME_SPECIAL_CHAR</td><td valign="top" align="center"><code>::=</code></td><td valign="top">
[<code class="constant">"_"</code>,
<code class="constant">"."</code>,
<code class="constant">"+"</code>,
<code class="constant">"-"</code>,
<code class="constant">"="</code>,
<code class="constant">"$"</code>]
</td><td align="left" valign="top"> </td></tr></table></td></tr></table></div></div><div class="navfooter"><table width="100%" summary="Navigation footer"><tr><td align="left"><a accesskey="p" href="PsyllaReference_Interpreter.xhtml"><img src="../navigation/prev.svg" alt="Prev"/></a> </td><td align="center"> </td><td align="right"> <a accesskey="n" href="PsyllaReference_Types.xhtml"><img src="../navigation/next.svg" alt="Next"/></a></td></tr><tr><td align="left" valign="top">Chapter 1. Interpreter </td><td align="center"><a accesskey="h" href="PsyllaReference.xhtml"><img src="../navigation/home.svg" alt="Home"/></a></td><td align="right" valign="top"> Chapter 3. Types</td></tr></table></div></body></html>