<?xml version="1.0"?>
<project name="psylla" default="jar" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">

	<!-- Properties -->
	<property name="project.name" value="${ant.project.name}"/>
	<property name="src" location="src"/>
	<property name="src.main" location="${src}/main"/>
	<property name="src.test" location="${src}/test"/>
	<property name="src.examples" location="${src}/examples"/>
	<property name="src.main.java" location="${src.main}/java"/>
	<property name="src.main.psi" location="${src.main}/psi"/>
	<property name="src.test.java" location="${src.test}/java"/>
	<property name="src.test.psi" location="${src.test}/psi"/>
	<property name="src.main.jj" location="${src.main}/jj"/>
	<property name="src.examples.psi" location="${src.examples}/psi"/>
	<property name="src.docbook" location="${src}/docbook"/>
	<property name="src.ant" location="${src}/ant"/>
	<property name="src.bin" location="${src}/bin"/>
	<property name="src.css" location="${src}/css"/>
	<property name="src.vim" location="${src}/vim"/>
	<property name="src.mime" location="${src}/mime"/>
	<property name="src.logo" location="${src}/logo"/>
	<property name="target" location="target"/>
	<property name="target.src.main" location="${target}/src/main"/>
	<property name="target.src.main.java" location="${target.src.main}/java"/>
	<property name="target.doc" location="${target}/doc"/>
	<property name="target.doc.apidocs"  location="${target.doc}/apidocs"/>
	<property name="target.classes" location="${target}/classes"/>
	<property name="target.lib"  location="${target}/lib"/>
	<property name="target.bin"  location="${target}/bin"/>
	<property name="target.obs" value="${target}/obs"/>
	<property name="target.man"  location="${target}/man"/>
	<property name="target.doc.html" location="${target.doc}/html"/>
	<property name="target.vim" location="${target}/vim"/>
	<property name="target.mime" location="${target}/mime"/>
	<property name="target.gh-pages" location="${target}/gh-pages"/>
	<property name="test.file"  location="test.psi"/>
	<property name="datadir" location="/usr/share"/>
	<property name="datadir.java" location="${datadir}/java"/>
	<property name="datadir.ant" location="${datadir}/ant"/>
	<property name="datadir.xml" location="${datadir}/xml"/>
	<property name="datadir.javadoc" location="${datadir}/javadoc"/>
	<property name="datadir.javadoc.java" location="${datadir.javadoc}/java"/>
	<property name="sysconfdir" location="/etc"/>
	<property name="sysconfdir.xml" location="${sysconfdir}/xml"/>
	<path id="classpath.main">
		<pathelement path="${target.lib}/${project.name}.jar"/>
		<pathelement path="${datadir.java}/jline.jar"/>
		<pathelement path="${datadir.java}/ant.jar"/>
		<pathelement path="${datadir.ant}/lib/ant-junit.jar"/>
	</path>
	<path id="classpath.test">
		<pathelement path="${target.lib}/${project.name}.jar"/>
		<pathelement path="${datadir.java}/jline.jar"/>
		<pathelement path="${datadir.java}/junit4.jar"/>
		<pathelement path="${datadir.java}/junit.jar"/><!-- For mageia -->
	</path>
	<xmlcatalog id="xmlcatalog.xslt">
		<catalogpath>
			<!--pathelement location="${src.docbook}/xmlcatalog"/-->
			<pathelement location="${sysconfdir.xml}/catalog"/>
			<pathelement location="${sysconfdir.xml}/docbook5-xsl-stylesheets.xml"/>
			<pathelement location="${sysconfdir.xml}/docbook-xsl-ns.xml"/>
			<pathelement location="${sysconfdir.xml}/w3-dtd--mathml.xml"/>
		</catalogpath>
	</xmlcatalog>
	<path id="classpath.xslt">
		<pathelement location="${datadir.java}/saxon6.jar"/>
		<pathelement location="${datadir.xml}/docbook/stylesheet/nwalsh5/current/extensions/saxon65.jar"/>
		<pathelement location="${datadir.java}/xslthl.jar"/>
		<!--pathelement location="${datadir.java}/xerces-j2-xml-apis.jar"/-->

		<!-- for Debian -->
		<pathelement location="${datadir.java}/saxon-6.5.5.jar"/>
		<pathelement location="${datadir.java}/docbook-xsl-saxon.jar"/>
		<pathelement location="${datadir.java}/xercesImpl.jar"/>
	</path>
	<property file="${src.main.java}/coneforest/psi/Version.properties" prefix="project"/>
	<property
		name="project.version"
		value="${project.version.major}.${project.version.minor}.${project.version.revision}"
		/>
	<property file="${src.ant}/config.properties"/>

	<!-- Import supplementary Ant projects -->
	<import file="${src.ant}/htmldocs.ant" as="htmldocs"/>
	<import file="${src.ant}/manpages.ant" as="manpages"/>
	<import file="${src.ant}/install.ant" as="install"/>
	<import file="${src.ant}/obs.ant"/>
	<import file="${src.ant}/gh-pages.ant"/>

	<target name="compile.jj"
		description="Compile JJ sources"
		>
		<mkdir dir="${target.src.main.java}/coneforest/psi"/>
		<javacc
			target="${src.main.jj}/coneforest/psi/Parser.jj"
			outputdirectory="${target.src.main.java}/coneforest/psi"
			javacchome="${datadir.java}"
			unicodeinput="true"
			static="false"
			/>
	</target>

	<target name="compile.java"
			description="Compile Java sources"
			depends="compile.jj"
			>
		<mkdir dir="${target.classes}"/>
		<javac
			srcdir="${src.main.java}:${target.src.main.java}:${src.test.java}"
			destdir="${target.classes}"
			source="1.8"
			target="1.8"
			includeantruntime="false"
			encoding="UTF-8"
			>
			<!--compilerarg value="-Xlint"/-->
			<!--compilerarg value="-Xdoclint"/-->
			<classpath refid="classpath.main"/>
			<classpath refid="classpath.test"/>
			<compilerarg value="-Xdiags:verbose"/>
		</javac>
		<native2ascii
			src="${src.main.java}"
			encoding="UTF-8"
			dest="${target.classes}"
			includes="**/*.properties"
			ext=".properties"
			/>
		<echoproperties
			destfile="${target.classes}/coneforest/psi/Config.properties"
			prefix="config."
			/>
	</target>

	<target name="compile"
		description="Compile sources"
		depends="compile.jj,compile.java"
		/>

	<target name="docs"
		description="Build documentation"
		depends="manpages,apidocs,htmldocs"
		/>

	<target name="apidocs"
		description="Build API documentation"
		depends="jar"
		>
		<javadoc
				sourcepath="${src.main.java}"
				destdir="${target.doc.apidocs}"
				access="public"
				encoding="UTF-8"
				charset="UTF-8"
				windowtitle="Psylla ${project.version}"
				>
			<classpath refid="classpath.main"/>
			<classpath refid="classpath.test"/>
			<arg value="-Xdoclint:missing,reference"/>
			<link href="${datadir.javadoc.java}"/>
			<link href="${datadir.javadoc}/junit"/>
			<link href="http://jline.sourceforge.net/apidocs/"/>
			<link href="${datadir}/doc/openjdk-8-jre-headless/api"/><!-- For Debian -->
			<link href="${datadir}/doc/libjline-java/api"/><!-- For Debian -->
		</javadoc>
		<!--move file="${target.doc.javadoc}/stylesheet.css" tofile="${target.doc.javadoc}/default.scss"/>
		<apply executable="sass" dest="${target.doc.javadoc}" parallel="false">
			<arg value="- -load-path"/>
			<arg value="${target.doc.javadoc}"/>
			<arg value="- -style"/>
			<arg value="compact"/>
			<srcfile/>
			<targetfile/>
			<fileset dir="${src.css}" includes="javadoc.scss"/>
			<mapper type="glob" from="javadoc.scss" to="stylesheet.css"/>
		</apply>
		<delete file="${target.doc.javadoc}/default.scss"/-->
	</target>

	<target name="jar"
		description="Build Jar"
		depends="compile">
		<jar
			jarfile="${target.lib}/${project.name}-${project.version}.jar"
			basedir="${target.classes}"
			>
			<manifest>
				<attribute name="Main-Class" value="coneforest.psi.Psylla"/>
			</manifest>
			<service
				type="javax.script.ScriptEngineFactory"
				provider="coneforest.psi.engine.PsiScriptEngineFactory"
				/>
		</jar>
		<symlink
			resource="${project.name}-${project.version}.jar"
			link="${target.lib}/${project.name}.jar"
			overwrite="true"
			/>
	</target>

	<target name="clean" description="Clean build directory">
		<delete dir="${target}"/>
	</target>

	<target name="test"
		description="Perform unit tests"
		depends="jar"
		>
		<!--junit>
			<classpath refid="classpath.test"/>
			<formatter type="plain" usefile="false"/>
			<test name="coneforest.psi.tools.PsyllaTest"/>
		</junit-->
		<!--junit>
			<classpath refid="classpath.test"/>
			<formatter type="plain" usefile="false"/>
			<test name="coneforest.psi.tools.MyTest"/>
		</junit-->
		<taskdef name="psyllaunit"
			classname="coneforest.psi.tools.ant.PsyllaUnit"
			classpathref="classpath.test"
			/>
		<psyllaunit>
			<classpath refid="classpath.test"/>
			<formatter type="plain" usefile="false"/>
			<!--test dir="${src.test.psi}"/-->
			<test name="src/test/psi"/>
			<!--test name="src/test/psi/operators/loop/0_exit_inside.t"/>
			<test name="src/test/psi/operators/loop/1_nested_in_loop.t"/-->
		</psyllaunit>
	</target>


	<target name="test.anttask" depends="jar">
		<taskdef
			name="psylla"
			classname="coneforest.psi.tools.ant.Psylla"
			classpathref="classpath.main"
			/>
		<psylla eval="0 1 1 99 { ? } for"/>
		<psylla eval="1 atan 4 mul ?"/>
	</target>

	<target name="htmldocs"
		description="Build XHTML documentation"
		depends="htmldocs.htmldocs"
		/>

	<target name="manpages"
		description="Build manpages"
		depends="manpages.manpages"
		/>

	<target name="dist.zip" description="Make Zip distribution">
		<mkdir dir="${target}/tmp/${project.name}-${project.version}"/>
		<copy todir="${target}/tmp/${project.name}-${project.version}">
			<fileset
				dir="."
				includes="src/** build.xml README LICENSE AUTHORS"
				/>
		</copy>
		<zip
			destfile="${target}/${project.name}-${project.version}.zip"
			basedir="${target}/tmp"
			>
			<fileset
				dir="${target}/tmp"
				includes="${project.name}-${project.version}/**"
				/>
		</zip>
		<delete dir="${target}/tmp" quiet="yes"/>
	</target>

	<target name="dist.tar"
		description="Make Tar distribution"
		>
		<mkdir dir="${target}"/>
		<exec outputproperty="git.stashname" executable="git">
			<arg value="stash"/>
			<arg value="create"/>
		</exec>
		<condition property="git.object" value="HEAD" else="${git.stashname}">
			<length string="${git.stashname}" when="eq" length="0"/>
		</condition>
		<echo message="${git.object}"/>
		<exec executable="git">
			<arg value="archive"/>
			<arg value="--prefix"/>
			<arg value="${project.name}-${project.version}/"/>
			<arg value="--output"/>
			<arg value="${target}/${project.name}-${project.version}.tar.xz"/>
			<arg value="${git.object}"/>
			<arg value="--"/>
			<arg value="build.xml"/>
			<arg value="src"/>
			<arg value="README"/>
			<arg value="LICENSE"/>
			<arg value="AUTHORS"/>
		</exec>
	</target>

	<target name="build"
		description="Build project"
		depends="jar,docs"
		>
		<copy todir="${target.bin}" file="${src.bin}/${project.name}"/>
		<chmod file="${target.bin}/${project.name}" perm="ugo+rx"/>
		<copy todir="${target.doc}">
			<fileset dir="." includes="README LICENSE AUTHORS"/>
			<fileset dir="${src}" includes="examples/**/*"/>
		</copy>
		<copy todir="${target.vim}">
			<fileset dir="${src.vim}" includes="**/*"/>
		</copy>
		<copy todir="${target.mime}">
			<fileset dir="${src.mime}" includes="**/*"/>
		</copy>
	</target>

	<target name="help"
		description="Display help information"
		>
		<echo><![CDATA[Build targets:

	apidocs:	build API documentation
	build:		build project
	clean:		clean build directory
	compile.java:	compile Java sources
	compile.jj:	compile JJ sources
	compile:	compile sources
	dist.tar:	make Tar distribution
	dist.zip:	make Zip distribution
	docs:		build documentation
	help:		display help information
	htmldocs:	build XHTML documentation
	jar:		build Jar
	manpages:	build manpages
	test:		perform unit tests

Default target is jar.]]></echo>
	</target>

</project>
