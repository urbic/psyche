<?xml version="1.0"?>
<project name="psylla"
	default="jar"
	xmlns:if="ant:if"
	xmlns:unless="ant:unless"
	xmlns:ivy="antlib:org.apache.ivy.ant"
	>

	<description>${project.description}</description>

	<!-- Properties -->
	<property name="src" location="src"/>
	<property name="src.main" location="${src}/main"/>
	<property name="src.test" location="${src}/test"/>
	<property name="src.examples" location="${src}/examples"/>
	<property name="src.main.java" location="${src.main}/java"/>
	<property name="src.main.psylla" location="${src.main}/psylla"/>
	<property name="src.main.resources" location="${src.main}/resources"/>
	<property name="src.test.java" location="${src.test}/java"/>
	<property name="src.test.psylla" location="${src.test}/psylla"/>
	<property name="src.test.data" location="${src.test}/data"/>
	<property name="src.main.jj" location="${src.main}/jj"/>
	<property name="src.examples.psylla" location="${src.examples}/psylla"/>
	<property name="src.examples.java" location="${src.examples}/java"/>
	<property name="src.doc" location="${src}/doc"/>
	<property name="src.doc.xhtml" location="${src.doc}/xhtml"/>
	<property name="src.doc.xsl" location="${src.doc}/xsl"/>
	<property name="src.doc.docbook" location="${src.doc}/docbook"/>
	<property name="src.doc.scss" location="${src.doc}/scss"/>
	<property name="src.ant" location="${src}/ant"/>
	<property name="src.bin" location="${src}/bin"/>
	<property name="src.css" location="${src}/css"/>
	<property name="src.vim" location="${src}/vim"/>
	<property name="src.maven" location="${src}/maven"/>
	<property name="src.mime" location="${src}/mime"/>
	<property name="src.logo" location="${src}/logo"/>
	<property name="target" location="target"/>
	<property name="target.src.main" location="${target}/src/main"/>
	<property name="target.src.main.java" location="${target.src.main}/java"/>
	<property name="target.doc" location="${target}/doc"/>
	<property name="target.doc.apidocs"  location="${target.doc}/apidocs"/>
	<property name="target.dot"  location="${target}/dot"/>
	<property name="target.classes" location="${target}/classes"/>
	<property name="target.lib"  location="${target}/lib"/>
	<property name="target.bin"  location="${target}/bin"/>
	<property name="target.obs" location="${target}/obs"/>
	<property name="target.man"  location="${target}/man"/>
	<property name="target.doc.html" location="${target.doc}/html"/>
	<property name="target.vim" location="${target}/vim"/>
	<property name="target.mime" location="${target}/mime"/>
	<property name="target.gh-pages" location="${target}/gh-pages"/>
	<property name="datadir" location="/usr/share"/>
	<property name="file.encoding" value="UTF-8"/>
	<property name="linux.flavour" value="redhat"/>
	<property name="build.sysclasspath" value="ignore"/>

	<property file="${src.ant}/config.properties"/>
	<property file="${src.ant}/config-${linux.flavour}.properties"/>

	<path id="classpath.main">
		<pathelement location="${target.classes}"/>
		<!--pathelement location="${ant.core.lib}"/-->
		<!--pathelement location="${config.datadir}/ant/lib/ant-junit.jar"/-->
		<!--pathelement location="${config.jar.junit4}"/-->
		<!--pathelement location="${config.jar.jline1}"/-->
		<path refid="classpath.main.resolved"/>
	</path>

	<!--path id="modulepath.main">
		<!- -path refid="modulepath.main.resolved"/- ->
		<pathelement location="${config.jar.jline1}"/>
		<pathelement location="${config.datadir}/ant/lib/ant-junit.jar"/>
		<pathelement location="${config.jar.junit4}"/>
		<pathelement location="${ant.core.lib}"/>
	</path-->

	<path id="classpath.xslt">
		<!--pathelement location="${config.jar.saxon6}"/-->
		<!--pathelement location="${config.jar.xslthl}"/-->
		<pathelement location="${config.jar.xerces}"/>
		<pathelement location="${config.jar.docbook-xsl-saxon}"/>
		<path refid="classpath.xslt.resolved"/>
	</path>

	<xmlcatalog id="xmlcatalog.xslt">
		<catalogpath>
			<pathelement location="${config.sysconfdir}/xml/catalog"/>
			<pathelement location="${config.sysconfdir}/xml/docbook5-xsl-stylesheets.xml"/>
			<pathelement location="${config.sysconfdir}/xml/docbook-xsl-ns.xml"/>
			<pathelement location="${config.sysconfdir}/xml/w3-dtd--mathml.xml"/>
		</catalogpath>
	</xmlcatalog>

	<!-- Import supplementary Ant projects -->
	<import file="${src.ant}/test.ant"/>
	<import file="${src.ant}/test-examples.ant"/>
	<import file="${src.ant}/htmldocs.ant"/>
	<import file="${src.ant}/manpages.ant"/>
	<import file="${src.ant}/install.ant"/>
	<import file="${src.ant}/obs.ant"/>
	<import file="${src.ant}/gh-pages.ant"/>

	<target name="resolve" description="Retrieve dependencies with Ivy">
		<ivy:resolve conf="compile,xslt"/>
		<ivy:cachepath pathid="classpath.main.resolved" conf="compile"/>
		<ivy:cachepath pathid="classpath.xslt.resolved" conf="xslt"/>
	</target>

	<target name="compile.jj"
		description="Compile JJ sources"
		>
		<mkdir dir="${target.src.main.java}/coneforest/psylla"/>
		<javacc
			target="${src.main.jj}/coneforest/psylla/Parser.jj"
			outputdirectory="${target.src.main.java}/coneforest/psylla"
			javacchome="${config.datadir}/java"
			unicodeinput="true"
			static="false"
			/>
	</target>

	<target name="compile.java"
		description="Compile Java sources"
		depends="resolve,copy.resources,compile.jj"
		>
		<javac
			srcdir="${src.main.java}"
			destdir="${target.classes}"
			release="17"
			includeantruntime="false"
			encoding="UTF-8"
			>
			<modulepath refid="classpath.main"/>
			<include name="coneforest/psylla/tools/processors/*.java"/>
			<compilerarg value="-Xlint:deprecation"/>
			<compilerarg value="-proc:none"/>
			<compilerarg value="-Xdiags:verbose"/>
		</javac>
		<mkdir dir="${target.classes}/META-INF/${project.name}/type"/>
		<mkdir dir="${target.classes}/META-INF/${project.name}/exception"/>
		<mkdir dir="${target.dot}"/>
		<javac
			srcdir="${src.main.java}:${target.src.main.java}:${src.test.java}"
			destdir="${target.classes}"
			release="17"
			includeantruntime="false"
			encoding="UTF-8"
			>
			<modulepath refid="classpath.main"/>
			<!--compilerarg value="-XprintRounds"/-->
			<compilerarg value="-XprintProcessorInfo"/>
			<compilerarg value="-Xprefer:source"/>
			<compilerarg value="-implicit:class"/>
			<compilerarg value="-Xlint:deprecation"/>
			<compilerarg value="-Aconeforest.psylla.tools.processors.TypeMetadataCollector.metadataDir=${target.classes}/META-INF/${project.name}/"/>
			<compilerarg value="-Aconeforest.psylla.tools.processors.TypeHierarchyBuilder.outputDir=${target.dot}"/>
			<compilerarg value="-Xdiags:verbose"/>
		</javac>
	</target>

	<target name="compile"
		description="Compile sources"
		depends="compile.jj,compile.java"
		/>

	<target name="docs"
		description="Build documentation"
		depends="manpages,apidocs,htmldocs"
		/>

	<target name="apidocs"
		description="Build API documentation"
		depends="jar"
		>
		<javadoc
			sourcepath="${src.main.java}"
			destdir="${target.doc.apidocs}"
			access="public"
			encoding="UTF-8"
			charset="UTF-8"
			windowtitle="Psylla ${project.version}"
			>
			<classpath refid="classpath.main"/>
			<arg value="-Xdoclint:missing,reference"/>
			<link href="${config.javadocdir.java}"/>
			<link href="${config.javadocdir.junit4}"/>
			<link href="${config.javadocdir.jline1}"/>
		</javadoc>
	</target>

	<target name="copy.resources"
		description="Copy resources"
		>
		<copy todir="${target.classes}">
			<fileset dir="${src.main.resources}" includes="**"/>
		</copy>
		<mkdir dir="${target.classes}/META-INF/licenses"/>
		<copy
			todir="${target.classes}/META-INF/licenses"
			file="LICENSE"
			/>
		<echoproperties
			destfile="${target.classes}/coneforest/psylla/Config.properties"
			>
			<propertyset>
				<propertyref prefix="config."/>
				<propertyref prefix="project."/>
			</propertyset>
		</echoproperties>
		<mkdir
			dir="${target.classes}/META-INF/maven/${project.maven.groupId}/${project.maven.artifactId}"
			/>
		<echoproperties
			destfile="${target.classes}/META-INF/maven/${project.maven.groupId}/${project.maven.artifactId}/pom.properties"
			>
			<propertyset>
				<propertyref prefix="project.maven."/>
				<mapper type="glob" from="project.maven.*" to="*"/>
			</propertyset>
		</echoproperties>
	</target>

	<target name="jar"
		description="Build Jar"
		depends="compile"
		>
		<jar
			jarfile="${target.lib}/${project.nameversion}.jar"
			basedir="${target.classes}"
			>
			<manifest>
				<attribute name="Main-Class" value="coneforest.psylla.Psylla"/>
			</manifest>
		</jar>
		<symlink
			resource="${project.nameversion}.jar"
			link="${target.lib}/${project.name}.jar"
			overwrite="true"
			/>
	</target>

	<target name="pom"
		description="Generate POM"
		>
		<mkdir dir="${target.lib}"/>
		<!--copy
			file="${src.maven}/${project.name}.pom"
			tofile="${target.lib}/${project.nameversion}.pom"
			filtering="true"
			overwrite="yes"
			>
			<filterset>
				<propertyset>
					<propertyref prefix="project."/>
				</propertyset>
			</filterset>
		</copy-->
		<ivy:makepom
			ivyfile="ivy.xml"
			templatefile="${src.maven}/${project.name}.pom"
			pomfile="${target.lib}/${project.nameversion}.pom"
			>
			<ivy:mapping conf="default" scope="compile"/>
		</ivy:makepom>
		<symlink
			resource="${project.nameversion}.pom"
			link="${target.lib}/${project.name}.pom"
			overwrite="true"
			/>
	</target>

	<target name="clean" description="Clean build directory">
		<delete dir="${target}"/>
	</target>

	<target name="test" description="Perform general tests"
		depends="test.anttask,test.cli,test.jsr223,test.psylla"/>

	<target name="htmldocs"
		description="Build XHTML documentation"
		depends="htmldocs.htmldocs"
		/>

	<target name="manpages"
		description="Build manpages"
		depends="manpages.manpages"
		/>

	<target name="dist.zip" description="Make Zip distribution">
		<mkdir dir="${target}/tmp/${project.nameversion}"/>
		<copy todir="${target}/tmp/${project.nameversion}">
			<fileset
				dir="."
				includes="src/** build.xml README LICENSE AUTHORS"
				/>
		</copy>
		<zip
			destfile="${target}/${project.nameversion}.zip"
			basedir="${target}/tmp"
			>
			<fileset
				dir="${target}/tmp"
				includes="${project.nameversion}/**"
				/>
		</zip>
		<delete dir="${target}/tmp" quiet="yes"/>
	</target>

	<target name="dist.tar"
		description="Make Tar distribution"
		>
		<mkdir dir="${target}"/>
		<exec outputproperty="git.stashname" executable="git">
			<arg value="stash"/>
			<arg value="create"/>
		</exec>
		<condition property="git.object" value="HEAD" else="${git.stashname}">
			<length string="${git.stashname}" when="eq" length="0"/>
		</condition>
		<echo message="${git.object}"/>
		<exec executable="git">
			<arg value="archive"/>
			<arg value="--prefix=${project.nameversion}/"/>
			<arg value="--output=${target}/${project.nameversion}.tar.xz"/>
			<arg value="${git.object}"/>
			<arg value="--"/>
			<arg value="build.xml"/>
			<arg value="ivy.xml"/>
			<arg value="src"/>
			<arg value="README"/>
			<arg value="LICENSE"/>
			<arg value="AUTHORS"/>
		</exec>
	</target>

	<target name="build"
		description="Build project"
		depends="jar,pom,docs"
		>
		<copy tofile="${target.bin}/${project.name}" file="${src.bin}/${project.name}-${linux.flavour}"/>
		<chmod file="${target.bin}/${project.name}" perm="ugo+rx"/>
		<copy todir="${target.doc}">
			<fileset dir="." includes="README LICENSE AUTHORS"/>
			<fileset dir="${src}" includes="examples/**/*"/>
		</copy>
		<copy todir="${target.vim}">
			<fileset dir="${src.vim}" includes="**/*"/>
		</copy>
		<copy todir="${target.mime}">
			<fileset dir="${src.mime}" includes="**/*"/>
		</copy>
	</target>

	<target name="docker.build">
		<exec executable="docker">
			<arg value="build"/>
			<arg value="-t${project.developer.id}/${project.name}:${project.version}"/>
			<arg value="."/>
		</exec>
	</target>

</project>
